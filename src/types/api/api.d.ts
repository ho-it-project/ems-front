/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/ems/ambulances/{ambulance_id}": {
    /**
     * 2023-10-02 구급차 상세 조회 API
     * @description 구급차 상세 조회 API
     *
     * ## param
     * - ambulance_id: string
     */
    get: {
      parameters: {
        path: {
          ambulance_id: string;
        };
      };
      responses: {
        /** @description 구급차 상세 정보 */
        200: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_EmsAmbulanceResponse.GetAmbulanceDetail_gt_"];
          };
        };
        /** @description 구급차량을 찾을 수 없습니다. */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_AMBULANCE_ERROR.AMBULANCE_NOT_FOUND"];
          };
        };
      };
    };
    /**
     * 2023-11-13 구급차 직원 설정 API
     * @description 구급차 직원 설정 API
     *
     * 구급차 - 직원 관계를 설정하는 API입니다 (담당기사, 응급구조사, 간호사 등..)
     * 직원은 한대의 구급차에만 등록될 수 있습니다.
     *
     * ## 사용자 권한
     * - ADMIN
     * 해당 API는 ADMIN 권한이 있는 사용자만 사용할 수 있습니다.
     *
     * ## param
     * - ambulance_id: string
     *
     * ## body
     * - employee_list: {
     *  employee_id: string,
     *  action: 'ADD' | 'REMOVE'
     * }[]
     */
    post: {
      parameters: {
        path: {
          ambulance_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsAmbulanceRequest.SetAmbulanceEmployeesDTO"];
        };
      };
      responses: {
        /** @description 성공 여부 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt__doublequote_SUCCESS_doublequote__gt_"];
          };
        };
        /** @description 권한이 없습니다. */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
        /** @description 구급차량을 찾을 수 없습니다. */
        "404.1": {
          content: {
            "application/json": components["schemas"]["EMS_AMBULANCE_ERROR.AMBULANCE_NOT_FOUND"];
          };
        };
        /** @description 직원을 찾을 수 없습니다. */
        "404.2": {
          content: {
            "application/json": components["schemas"]["EMS_AMBULANCE_ERROR.EMPLOYEE_NOT_FOUND"];
          };
        };
        /** @description 이미 해당 구급차에 등록된 직원입니다. */
        "409.1": {
          content: {
            "application/json": components["schemas"]["EMS_AMBULANCE_ERROR.EMPLOYEE_ALREADY_ASSIGNED"];
          };
        };
        /** @description 해당 구급차에 등록되지 않은 직원입니다. */
        "409.2": {
          content: {
            "application/json": components["schemas"]["EMS_AMBULANCE_ERROR.EMPLOYEE_NOT_ASSIGNED"];
          };
        };
      };
    };
  };
  "/ems/ambulance-companies": {
    /**
     * 2023-10-02 구급업체 리스트 조회 API
     * @description 구급업체 리스트 조회 API
     *
     * ## query
     * - page: number
     * - limit: number
     * - search: string
     *
     * - city: string[]
     *    - ex) '서울특별시','서울','서울시'
     *       -> 서버에서 '서울'로 정제하여 검색하기때문에 모두 가능
     *    - ex) '충남','충청남도'
     *       -> 서버에서 '충남'으로 정제하여 검색하기때문에 모두 가능
     *    - ex) '대전광역시','대전'
     *       -> 서버에서 '대전'으로 정제하여 검색하기때문에 모두 가능
     *
     *  - area: string[]
     *    - ex) '강남','강남구'
     *    -> 서버에서 '강남'으로 정제하여 검색하기때문에 모두 가능
     *
     *    - ex) '천안시 동남구', '천안 동남구', '천안시 동남', '천안 동남'
     *    -> '천안동남'으로 정제하여 검색하기때문에 모두 가능
     *    -> 주의 : '천안시동남구" 는 정제되지 않기때문에 검색되지 않음 (띄어쓰기 필수)
     *
     *    - ex) '천안시', '천안'
     *    -> '천안'으로 정제하여 검색하기때문에 모두 가능
     *
     * - ambulance_type: ems_AmbulanceType[]
     *    - 보유중인 구급차량 타입
     *    - BOX_TYPE, GENERAL, NEGATIVE_PRESSURE, SPECIAL
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["EmsAmbulanceCompanyRequest.GetAmbulanceCompanyListQuery"];
        };
      };
      responses: {
        /** @description 구급업체 리스트 및 총 구급업체 수 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_EmsAmbulanceCompanyResponse.GetAmbulanceCompanyList_gt_"];
          };
        };
      };
    };
  };
  "/ems/ambulance-companies/{ems_ambulance_company_id}": {
    /**
     * 2023-10-02 구급업체 상세 조회 API
     * @description 구급업체 상세 조회 API
     *
     * - 구급업체 상세 정보를 조회한다.
     *
     * ## params
     * - ems_ambulance_company_id: string
     */
    get: {
      parameters: {
        path: {
          ems_ambulance_company_id: string;
        };
      };
      responses: {
        /** @description 구급업체 상세 정보 */
        200: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_EmsAmbulanceCompanyResponse.GetAmbulanceCompanyDetail_gt_"];
          };
        };
        /** @description EMS_AMBULANCE_COMPANY_ERROR.AMBULANCE_COMPANY_NOT_FOUND */
        400: {
          content: {
            "application/json": components["schemas"]["EMS_AMBULANCE_COMPANY_ERROR.AMBULANCE_COMPANY_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/employees": {
    /**
     * 2023-10-01 - 직원 리스트 조회 API
     * @description 직원 리스트 조회 API
     *
     * 직원 리스트를 조회한다.
     * - access_token을 기반으로 소속 조직(회사) 직원 리스트를 조회한다.
     * - 회사마다 직원을 조회할수 있다
     *
     * ## query
     * - page : 조회할 페이지
     *   - default : 1
     * - limit : 한 페이지에 보여줄 직원 수
     *   - default : 10
     * - search_type : 검색 타입
     *   - employee_name | id_card
     * - search : seach_type에 따라 검색
     *   - default : '' - 전체
     * - role : 직원 타입 필터 - 복수 선택 가능
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["EmsEmployeeRequest.GetEmployeeListQuery"];
        };
      };
      responses: {
        /** @description 직원 리스트 및 총 직원 수 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_EmsEmployeeResponse.GetEmployeeList_gt_"];
          };
        };
      };
    };
    /**
     * 2023-10-01 - 직원 생성 API
     * @description 직원 생성 API
     * 직원들을 생성한다.
     * 한번에 여러명의 직원을 생성할 수 있다.
     *
     * ADMIN 권한이 필요하다.
     *
     * 필수값 : [id_card, name, password, role]
     *
     * - 조직(회사)마다 id_card는 중복될 수 없다.
     * - 따라서, 이 API사용 이전에 중복체크 API를 사용하여 중복을 검사해야한다.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsEmployeeRequest.CreateManyDTO"];
        };
      };
      responses: {
        /** @description 생성된 직원수 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_EmsEmployeeResponse.CreateManyEmployee_gt_"];
          };
        };
        /** @description EMS_EMPLOYEE_ERROR.EMPLOYEE_MULTIPLE_ALREADY_EXIST */
        400: {
          content: {
            "application/json": components["schemas"]["EMS_EMPLOYEE_ERROR.EMPLOYEE_MULTIPLE_ALREADY_EXIST"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
    /**
     * 2023-10-01 - 비밀번호 변경 API
     * @description 비밀번호 변경 API
     *
     * 비밀번호를 변경한다.
     * 필수값 : [password, now_password]
     *
     * now_password는 현재 비밀번호를 입력해야한다.
     * password는 변경할 비밀번호를 입력해야한다.
     */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsEmployeeRequest.UpdatePasswordDTO"];
        };
      };
      responses: {
        /** @description 비밀번호 변경 성공 여부 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_EmsEmployeeResponse.UpdatePassword_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND"];
          };
        };
        /** @description EMS_EMPLOYEE_ERROR.EMPLOYEE_PASSWORD_INVALID */
        "400.1": {
          content: {
            "application/json": components["schemas"]["EMS_EMPLOYEE_ERROR.EMPLOYEE_PASSWORD_INVALID"];
          };
        };
        /** @description EMS_EMPLOYEE_ERROR.EMPLOYEE_PASSWORD_SAME */
        "400.2": {
          content: {
            "application/json": components["schemas"]["EMS_EMPLOYEE_ERROR.EMPLOYEE_PASSWORD_SAME"];
          };
        };
      };
    };
  };
  "/ems/employees/exists": {
    /**
     * 2023-10-01 - 직원 중복체크 API
     * @description 직원 중복체크 API
     * 직원들을 중복체크한다.
     * 한번에 여러명의 직원을 중복체크할 수 있다.
     *
     * ADMIN 권한이 필요하다.
     *
     * 필수값 : [id_card]
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsEmployeeRequest.CheckManyExistDTO"];
        };
      };
      responses: {
        /** @description 중복체크 결과 */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_EmsEmployeeResponse.CheckManyEmployeeExist_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
  };
  "/ems/employees/{employee_id}": {
    /**
     * 2023-11-18 직원삭제 API
     * @description 직원 삭제 API
     *
     * 직원을 삭제하는 API입니다.
     * ADMIN 권한이 필요합니다.
     *
     * 필수값 : [employee_id]
     * employee_id는 삭제할 직원의 id입니다. (id_card가 아닙니다.)
     * ADMIN 권한이 있어야 삭제할 수 있습니다.
     *
     * 삭제된 직원은 복구할 수 없습니다.
     * admin은 삭제할 수 없습니다. (초기관리자)
     */
    put: {
      parameters: {
        path: {
          employee_id: string;
        };
      };
      responses: {
        /** @description 직원 삭제 성공 여부 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt__doublequote_SUCCESS_doublequote__gt_"];
          };
        };
        /** @description EMS_EMPLOYEE_ERROR.EMPLOYEE_ADMIN_NOT_DELETE */
        400: {
          content: {
            "application/json": components["schemas"]["EMS_EMPLOYEE_ERROR.EMPLOYEE_ADMIN_NOT_DELETE"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/patients": {
    /**
     * 2023-10-06 - 환자 목록 조회 API
     * @description 환자 목록 조회 API
     *
     *
     * 환자 목록을 조회합니다.
     * 담당한 환자만 조회할 수 있습니다.
     * 주민등록번호 뒷자리는 반환되지 않습니다.
     *
     * 현재 담당중인 환자조회가 필요할 경우 query를 통해 검색할수 있습니다.
     *
     * ## query
     *    - page?: number & tags.Minimum<1>;
     *        - default: 1
     *        - minimum: 1
     *    - limit?: number & tags.Minimum<1>;
     *        - default: 10
     *    - search?: string;
     *        - 검색어
     *    - search_type?: 'patient_name' | 'patient_birth' | 'patient_phone';
     *    - patient_status?: ems_PatientStatus[]; // 환자 진행상태 필터
     *    - patient_severity?: ems_Severity[]; // 환자 중증도 필터
     *    - patient_emergency_cause?: ems_IncidentCause[]; // 환자 응급사유 필터
     *    - gender?: Gender; // 환자 성별 필터
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["EmsPatientRequest.GetPatientListQuery"];
        };
      };
      responses: {
        /** @description 환자 목록 및 환자 수 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_EmsPatientResponse.GetPatientList_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
    /**
     * 2023-10-05 - 환자 생성 API
     * @description 환자 생성 API
     *
     * 환자를 생성합니다.
     * 만약 대기중인 환자가 있다면 생성할 수 없습니다.
     * PENDING 상태인 환자에대한 처리를 완료하거나, CANCLED 상태로 변경해야 합니다.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsPatientRequest.CreatePatientDTO"];
        };
      };
      responses: {
        /** @description 생성된 환자 id */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_EmsPatientResponse.CreatePatient_gt_"];
          };
        };
        /** @description EMS_PATIENT_ERROR.INCHARGED_PATIENT_ALREADY_EXIST */
        400: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.INCHARGED_PATIENT_ALREADY_EXIST"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
  };
  "/ems/patients/{patient_id}": {
    /**
     * 2023-10-06 - 환자 상세 조회 API
     * @description 환자 상세 조회 API
     *
     * 환자의 상세 정보를 조회합니다.
     * 주민등록번호 뒷자리는 복호화되어 반환됩니다.
     */
    get: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      responses: {
        /** @description 환자 상세 정보 */
        200: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_EmsPatientResponse.GetPatientDetail_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
    /**
     * 환자 취소 처리 API
     *
     *
     * 부득이하게 환자를 취소해야하는 경우 사용합니다
     * @description 환자 취소 처리 API
     *
     *
     * 부득이하게 환자를 취소해야하는 경우 사용합니다.
     * - 환자 정보는 수정할 수 없습니다. (환자 정보 수정은 별도의 API를 사용해주세요)
     */
    put: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      responses: {
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_undefined_gt_"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_ACCEPTED */
        400: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_ACCEPTED"];
          };
        };
        /** @description EMS_PATIENT_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
    /**
     * 2023-10-08 - 환자 완료 처리 API
     * @description 환자 완료 처리 API
     *
     *
     * 환자를 완료처리합니다.
     * 완료처리된 환자는 더이상 수정할 수 없습니다.
     *
     *
     * # 주의
     *
     * - 환자를 완료처리 하기 위해서는 병원으로부터 승인을 받아야합니다.
     * - 만약 승인을 받지 않은 상태에서 완료처리를 하면 400 에러가 발생합니다.
     *
     * - 담당 환자에대한 취소는 취소 API를 이용해주세요.
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      responses: {
        /** @description 없음 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_undefined_gt_"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_ACCEPTED */
        400: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_ACCEPTED"];
          };
        };
        /** @description EMS_PATIENT_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/patients/{patient_id}/abcde": {
    /**
     * 2023-10-06 - ABCDE 평가 생성 API - 사용안 할수도 있음
     * @description ABCDE 평가 생성 API
     *
     * ABCDE 평가를 생성합니다.
     * figma에있는 플로우 ABSc에대한 평가를 생성합니다.
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsPatientRequest.CreateABCDEAssessmentDTO"];
        };
      };
      responses: {
        /** @description 생성된 ABCDE 평가 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt___type_gt_"];
          };
        };
        /** @description EMS_PATIENT_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/patients/{patient_id}/dcap_btls": {
    /**
     * 2023-10-06 - DCAP_BTLS 평가 생성 API
     * @description DCAP_BTLS 평가 생성 API
     *
     * DCAP_BTLS 평가를 생성합니다.
     * figma에있는 플로우 DCAP_BTLS에대한 평가를 생성합니다.
     *
     * DCAP_BTLS 평가를 진행하는 경우
     * 1. 외상환자 - 손상기전 명확
     * 2. 비외상환자
     *    - 무의식 환자인 경우 첫번째 단계
     *    - 의식 환자인 경우 4번째(마지막) 단계
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsPatientRequest.CreateDCAP_BTLSAssessmentDTO"];
        };
      };
      responses: {
        /** @description 생성된 DCAP_BTLS 평가 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt___type_gt_.o1"];
          };
        };
        /** @description EMS_PATIENT_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/patients/{patient_id}/vs": {
    /**
     * 2023-10-06 - VS 평가 생성 API
     * @description VS 평가 생성 API
     *
     *
     * VS 평가를 생성합니다.
     * figma에있는 플로우 VS에대한 평가를 생성합니다.
     *
     * VS 평가는 모든 환자에게 진행되어야 합니다.
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsPatientRequest.CreateVSAssessmentDTO"];
        };
      };
      responses: {
        /** @description 생성된 VS 평가 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt___type_gt_.o2"];
          };
        };
        /** @description EMS_PATIENT_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/patients/{patient_id}/sample": {
    /**
     * 2023-10-06 - SAMPLE 평가 생성 API
     * @description SAMPLE 평가 생성 API
     *
     *
     * SAMPLE 평가를 생성합니다.
     * figma에있는 플로우 SAMPLE에대한 평가를 생성합니다.
     *
     * SAMPLE 평가는 모든 환자에게 진행되어야 합니다.
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsPatientRequest.CreateSAMPLEAssessmentDTO"];
        };
      };
      responses: {
        /** @description 생성된 SAMPLE 평가 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt___type_gt_.o3"];
          };
        };
        /** @description EMS_PATIENT_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/patients/{patient_id}/opqrst": {
    /**
     * 2023-10-06 - OPQRST 평가 생성 API
     * @description OPQRST 평가 생성 API
     *
     *
     * OPQRST 평가를 생성합니다.
     *
     * OPQRST 평가를 진행해야하는 경우
     * 1. 비외상환자
     *    - 의식환자의 경우 1번째 단계
     *    - 무의식환자의 경우 3번째 (보호자/신고자등) 단계
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsPatientRequest.CreateOPQRSTAssessmentDTO"];
        };
      };
      responses: {
        /** @description 생성된 OPQRST 평가 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt___type_gt_.o4"];
          };
        };
        /** @description EMS_PATIENT_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.FORBIDDEN"];
          };
        };
        /** @description EMS_PATIENT_ERROR.PATIENT_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["EMS_PATIENT_ERROR.PATIENT_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/er/departments": {
    /**
     * 2023-10-30 - 진료과 목록 조회 API
     * @description 진료과 목록 조회 API
     * 진료과 목록을 조회한다.
     *
     * 의사의 전문분야와 함께 조회한다.
     */
    get: {
      responses: {
        /** @description 진료과 목록 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_Array_lt__blt__space_doctor_specializations:_space__blt__space_doctor_specialization_id:_space_string;_space_doctor_specialization_name:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__bgt__space__and__space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__gt__gt_"];
          };
        };
      };
    };
  };
  "/er/departments/{department_id}": {
    /**
     * 2023-10-30 - 진료과 조회 API
     * @description 진료과 조회 API
     * 진료과를 조회한다.
     *
     * include 쿼리를 이용하여,
     * 진료과가 활성화된 병원, 전문분야 등을 조회할수 있다.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ErDepartmentRequest.GetDepartmetQuery"];
        };
        path: {
          department_id: number;
        };
      };
      responses: {
        /** @description 진료과 */
        200: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ErDepartment.GetDepartment_gt_"];
          };
        };
        /** @description ER_DEPARTMENT_ERROR.DEPARTMENT_NOT_EXIST */
        404: {
          content: {
            "application/json": components["schemas"]["ER_DEPARTMENT_ERROR.DEPARTMENT_NOT_EXIST"];
          };
        };
      };
    };
  };
  "/er/{er_id}/departments": {
    /**
     * 2023-10-30 - 진료과 목록 조회 API
     * @description 병원 진료과 목록 조회 API
     * 병원 진료과 목록을 조회한다.
     *
     * 응급실 ID를 이용하여, 병원의 진료과 목록을 조회한다.
     *
     * 첫조회시 해당 병원 진료과를 셋팅한다.
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ErDepartmentRequest.GetDepartmentListQuery"];
        };
        path: {
          er_id: string;
        };
      };
      responses: {
        /** @description 병원 진료과 목록 */
        200: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ErDepartment.GetHospitalDepartmentList_gt_"];
          };
        };
        /** @description ER_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["ER_ERROR.ER_NOT_FOUND"];
          };
        };
      };
    };
    /**
     * 2023-10-31 - 병원 진료과 업데이트 API
     * @description 병원 진료과 업데이트 API
     *
     * 병원의 진료과를 업데이트한다. (상태변경)
     *
     * 상위 진료과가 INACTIVE인 경우, 하위 진료과는 모두 INACTIVE로 변경된다.
     * 상위 진료과가 ACTIVE인 경우, 하위 진료과는 모두 ACTIVE로 변경된다.
     * 하위 진료과가 ACTIVE인 경우, 상위 진료과는 ACTIVE로 변경된다.
     */
    patch: {
      parameters: {
        path: {
          er_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErDepartmentRequest.UpdateHospitalDepartmentDto"];
        };
      };
      responses: {
        /** @description 성공여부 */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_string_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
  };
  "/er/emergency-centers": {
    /**
     * 2023-09-30 - 응급의료기관 리스트 조회 API
     * @description 응급의료기관 리스트 조회 API
     * 응급의료기관 리스트가 필요한 경우에 사용한다.
     *
     * 필수값 : [latitude, longitude]
     *
     * ## query
     * - page : 조회할 페이지
     *    - default : 1
     * - limit : 한 페이지에 보여줄 응급의료기관 수
     *    - default : 10
     * - search : 응급의료기관 이름으로 검색
     *    - default : '' - 전체
     * - emergency_center_type : 응급의료기관 타입 필터 - 복수 선택 가능
     *    - default : [] - 전체
     * - city : 도시로 검색
     *    - default : '' - 전체
     * - latitude : 위도
     * - longitude : 경도
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ErEmergencyCenterRequest.GetEmergencyCenterListQuery"];
        };
      };
      responses: {
        /** @description 응급의료기관 리스트 조회 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_DateToString_lt_ErEmergencyCenter.GetEmergencyCenterListQueryReturn_gt__gt_"];
          };
        };
      };
    };
  };
  "/er/emergency-centers/emergency-room/{emergency_room_id}": {
    /**
     * 2023-11-15 - 응급실 정보(병상) 조회 API
     * @description 응급실 정보(병상) 조회 API
     *
     * 응급실 정보(병상)를 조회한다.
     * 필수값 : [emergency_room_id]
     * 응급실의 병상과 환자정보를 응답한다.
     * 만약, 병상에 환자정보가 없다면 null을 응답한다.
     */
    get: {
      parameters: {
        path: {
          emergency_room_id: string;
        };
      };
      responses: {
        /** @description 응급실 정보 */
        200: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ErEmergencyCenter.GetEmergencyRoomByIdReturn_gt_"];
          };
        };
        /** @description ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/er/emergency-centers/{emergency_center_id}": {
    /**
     * 2023-11-12 - 응급의료기관 상세 조회 API
     * @description 응급의료기관 상세 조회 API
     *
     * emergency_center_id를 이용하여 응급의료기관 상세 정보를 조회한다.
     * 필수값 : [emergency_center_id]
     *
     * 병상정보, 치료가능 질환등 응급실 정보를 조회한다.
     */
    get: {
      parameters: {
        path: {
          emergency_center_id: string;
        };
      };
      responses: {
        /** @description 응급의료기관 조회 */
        200: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ErEmergencyCenter.GetEmergencyCenterByIdReturn_gt_"];
          };
        };
        /** @description ER_EMERGENCY_CENTER_ERROR.EMERGENCY_CENTER_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["ER_EMERGENCY_CENTER_ERROR.EMERGENCY_CENTER_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/er/emergency-centers/emergency-room/{emergency_room_id}/beds/{emergency_room_bed_num}": {
    /**
     * 2023-11-15 - 환자 병상 배정 API
     * @description 환자 병상 배정 API
     *
     * 환자를 병상에 배정한다.
     *
     * 필수값 : [patient_id, emergency_room_id, emergency_room_bed_num]
     * - patient_id : 환자 id (body)
     * - emergency_room_id : 응급실 id (param)
     * - emergency_room_bed_num : 응급실 병상 번호 (param)
     */
    post: {
      parameters: {
        path: {
          emergency_room_id: string;
          emergency_room_bed_num: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErEmergencyCenterRequest.AssignPatientToBedDto"];
        };
      };
      responses: {
        /** @description 성공여부 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt__doublequote_SUCCESS_doublequote__gt_"];
          };
        };
        /** @description ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_BED_NOT_AVAILABLE */
        400: {
          content: {
            "application/json": components["schemas"]["ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_BED_NOT_AVAILABLE"];
          };
        };
        /** @description ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_NOT_FOUND"];
          };
        };
      };
    };
    /**
     * 2023-11-15 - 환자 병상 이동 API
     * @description 환자 병상 이동 API
     *
     * body : [target_emergency_room_id, target_emergency_room_bed_num]
     * - target_emergency_room_id : 이동할 응급실 id
     * - target_emergency_room_bed_num : 이동할 응급실 병상 번호
     *
     * param : [emergency_room_id, emergency_room_bed_num]
     * - emergency_room_id : 응급실 id (param)
     * - emergency_room_bed_num : 응급실 병상 번호 (param)
     *
     * 필수값 : [target_emergency_room_id, target_emergency_room_bed_num, emergency_room_id, emergency_room_bed_num]
     */
    patch: {
      parameters: {
        path: {
          emergency_room_id: string;
          emergency_room_bed_num: number;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErEmergencyCenterRequest.ChangePatientToBedDto"];
        };
      };
      responses: {
        /** @description 성공여부 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt__doublequote_SUCCESS_doublequote__gt_"];
          };
        };
        /** @description ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_BED_NOT_AVAILABLE */
        400: {
          content: {
            "application/json": components["schemas"]["ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_BED_NOT_AVAILABLE"];
          };
        };
        /** @description ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_NOT_FOUND */
        404: {
          content: {
            "application/json": components["schemas"]["ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/er/employees": {
    /**
     * 2023-09-30 - 직원 리스트 조회 API
     * @description 직원 리스트 조회 API
     *
     * 직원 리스트를 조회한다.
     * - access_token을 기반으로 소속 병원의 직원 리스트를 조회한다.
     * - 병원마다 직원 리스트를 조회할 수 있다.
     *
     * ## query
     * - page : 조회할 페이지
     *   - default : 1
     * - limit : 한 페이지에 보여줄 직원 수
     *   - default : 10
     * - search_type : 검색 타입
     *   - employee_name | id_card
     * - search : seach_type에 따라 검색
     *   - default : '' - 전체
     * - role : 직원 타입 필터 - 복수 선택 가능
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ErEmployeeRequest.GetEmployeeListQuery"];
        };
      };
      responses: {
        /** @description 직원 리스트 조회 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErEmployeeResponse.GetEmployeeList_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
    /**
     * 2023-09-30 - 직원 생성 API
     * @description 직원 생성 API
     * 직원들을 생성한다.
     * 한번에 여러명의 직원을 생성할 수 있다.
     *
     * ADMIN 권한이 필요하다.
     *
     * 필수값 : [id_card, name, password, role]
     *
     * - 병원마다 id_card는 중복될 수 없다.
     * - 따라서, 이 API사용 이전에 중복체크 API를 사용하여 중복을 검사해야한다.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErEmployeeRequest.CreateManyDTO"];
        };
      };
      responses: {
        /** @description 생성된 직원 수 */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_Prisma.BatchPayload_gt_"];
          };
        };
        /** @description ER_EMPLOYEE_ERROR.EMPLOYEE_MULTIPLE_ALREADY_EXIST_RETURN */
        400: {
          content: {
            "application/json": components["schemas"]["ER_EMPLOYEE_ERROR.EMPLOYEE_MULTIPLE_ALREADY_EXIST"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
    /**
     * 2023-09-30 - 비밀번호 변경 API
     * @description 비밀번호 변경 API
     * 본인의 비밀번호를 변경한다.
     *
     * 필수값 : [password, now_password]
     *
     * 이전과 동일한 비밀번호로 변경할 수 없다.
     * 비밀번호는 8자리 이상이어야한다.
     */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErEmployeeRequest.UpdatePasswordDTO"];
        };
      };
      responses: {
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ErEmployeeResponse.UpdatePassword_gt_"];
          };
        };
        /** @description ER_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND */
        400: {
          content: {
            "application/json": components["schemas"]["ER_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
  };
  "/er/employees/exists": {
    /**
     * 2023-09-30 - 직원 중복체크 API
     * @description 직원 중복체크 API
     * 직원들을 중복체크한다.
     * 한번에 여러명의 직원을 중복체크할 수 있다.
     *
     * ADMIN 권한이 필요하다.
     *
     * 필수값 : [id_card]
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErEmployeeRequest.CheckManyExistDTO"];
        };
      };
      responses: {
        /** @description 중복체크 결과 */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErEmployeeResponse.CheckManyEmployeeExist_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
  };
  "/er/employees/specializations/nurse": {
    /**
     * 2023-10-31 - 간호사 전문분야 조회 API
     * @description 간호사 전문분야 조회 API
     * 간호사 전문분야를 조회한다.
     * - 간호사 전문분야는 ER에서만 사용한다.
     *
     * 직원[간호사] 생성시 사용한다.
     *
     * 의사 생성시에는 department조회를 통해 전문분야를 조회한다.
     */
    get: {
      responses: {
        /** @description 간호사 전문분야 리스트 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErEmployeeResponse.GetNurseSpecilizationList_gt_"];
          };
        };
      };
    };
  };
  "/er/current/equipments": {
    /**
     * 2023-10-12 - 장비보유현황 조회
     * @description 현재 로그인되어있는 병원의 장비 보유현황을 조회합니다.
     */
    get: {
      responses: {
        /** @description 장비보유현황 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErEquipment.GetEquipmentStatusByIdReturn_gt_"];
          };
        };
      };
    };
    /**
     * 2023-10-12 - 장비보유현황 업데이트
     * @description 로그인 되어있는 병원의 장비 보유현황을 업데이트합니다.
     * admin권한이 필요합니다.
     * patch document는 json merge patch의 방식을 따릅니다.
     * 업데이트된 장비의 상태를 반환합니다.
     */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["__type.o24"][];
        };
      };
      responses: {
        /** @description 업데이트된 장비의 상태. */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_Array_lt___type_gt__gt_"];
          };
        };
        /** @description Equipment not exist: */
        400: {
          content: {
            "application/json": components["schemas"]["ER_EQUIPMENT_ERROR.EQUIPMENT_NOT_EXIST"];
          };
        };
      };
    };
  };
  "/er/{er_id}/equipments": {
    /**
     * 2023-11-01 - 장비보유현황 조회
     * @description 특정 병원의 장비 보유현황을 조회합니다.
     */
    get: {
      parameters: {
        path: {
          er_id: string;
        };
      };
      responses: {
        /** @description 장비보유현황 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_Array_lt___type_gt__gt_"];
          };
        };
      };
    };
  };
  "/er/illnesses": {
    /**
     * 2023-11-01 질환 목록 조회
     * @description 질환 조회
     */
    get: {
      responses: {
        /** @description 질환 목록 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErIllness.GetIllnessesReturn_gt_"];
          };
        };
      };
    };
  };
  "/er/current/illnesses": {
    /**
     * 2023-10-16 치료가능질환 조회
     * @description 현재 로그인되어있는 유저의 병원의 질환의 진료가능여부를 조회합니다.
     * query로 진료가능 질환, 진료 불가능 질환을 조회할 수 있습니다.
     * `/current/illnesses?status=ACTIVE`: 진료 가능한질환만 조회
     * `/current/illnesses?status=INACTIVE`: 진료 불가능한질환만 조회
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ErIllnessRequest.GetCurrentServableIllnessesStatusQuery"];
        };
      };
      responses: {
        /** @description 치료가능질환 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErIllness.GetServableIllnessesStatusReturn_gt_"];
          };
        };
      };
    };
    /**
     * 2023-10-16 치료가능질환 업데이트
     * @description 치료가능질환 업데이트
     * admin권한이 필요합니다.
     * patch document는 JSON Merge Patch방식을 사용합니다.
     * 업데이트된 치료가능질환 상태를 반환합니다.
     */
    patch: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["__type.o27"][];
        };
      };
      responses: {
        /** @description 업데이트된 치료가능질환 상태 */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErIllness.UpdateServableIllnessesStatusReturn_gt_"];
          };
        };
      };
    };
  };
  "/er/{er_id}/illnesses": {
    /**
     * 2023-11-01 특정 병원의 치료가능질환 조회
     * @description 특정 병원의 질환의 진료가능여부를 조회합니다.
     * query로 진료가능 질환, 진료 불가능 질환을 조회할 수 있습니다.
     * `/:er_id/illnesses?status=ACTIVE`: 진료 가능한질환만 조회
     * `/:er_id/illnesses?status=INACTIVE`: 진료 불가능한질환만 조회
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ErIllnessRequest.GetCurrentServableIllnessesStatusQuery"];
        };
        path: {
          er_id: string;
        };
      };
      responses: {
        /** @description 요청한 병원의 진료가능질환 목록 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_Array_lt___type_gt__gt_.o1"];
          };
        };
      };
    };
  };
  "/er/patients": {
    /**
     * 2023-11-15 - 병원 환자 생성 API
     * @description 환자 생성 API
     * 병원에서 환자를 생성한다.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErPatientRequest.CreatePatientDto"];
        };
      };
      responses: {
        /** @description 생성된 환자 정보 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ErPatient.CreatePatientReturn_gt_"];
          };
        };
        /** @description ER_PATIENT_ERROR.DOCTOR_NOT_EXIST */
        400: {
          content: {
            "application/json": components["schemas"]["ER_PATIENT_ERROR.DOCTOR_NOT_EXIST"];
          };
        };
      };
    };
  };
  "/er/patients/{patient_id}": {
    /**
     * 2023-11-15 - 환자 로그 기록 API
     * @description 환자 로그 기록 API
     *
     * 환자의 상태를 기록한다.
     *
     * ## body
     * - log_type : 기록 종류
     *  DIAGNOSIS - 진단
     *  TREATMENT - 처치
     *  MEDICATION - 약물처방
     *  TRANSFER - 이송  *해당 기록은 환자의 상태를 이송으로 변경한다.
     *  DISCHARGE - 퇴원  *해당 기록은 환자의 상태를 퇴원으로 변경한다.
     *  DEATH - 사망
     *  CONSULTATION - 상담
     *
     * - log_desc : 기록 내용
     *
     * ## params
     * - patient_id : 환자 id
     *
     * 필수값 : [log_type, log_desc, patient_id]
     *
     *
     * ### 꼭 읽어주세요
     * - 현재 모든 log_type을 사용 가능하지만 정상적인 로직으로 작동하는 것은
     *  진단, 처치, 약물처방, 퇴원, 상담입니다.
     *
     * 이송은 어떠한 병원으로 이송 할지를 선택하는 로직을 추가해야합니다.
     * 사망은 사망한 환자의 정보를 어떻게 처리할건지 추가적인 고민이 필요합니다.
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErPatientRequest.RecordPatientLogDto"];
        };
      };
      responses: {
        /** @description 생성된 환자 정보 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt__doublequote_SUCCESS_doublequote__gt_"];
          };
        };
        /** @description ER_PATIENT_ERROR.PATIENT_NOT_EXIST */
        400: {
          content: {
            "application/json": components["schemas"]["ER_PATIENT_ERROR.PATIENT_NOT_EXIST"];
          };
        };
      };
    };
  };
  "/requests/ems-to-er": {
    /**
     * 2023-10-08 - EMS to Er 수용요청 생성 API
     * @description EMS to ER 수용요청 API
     *
     * 외부에서 응급환자 수용 요청 하는 API 입니다.
     * (EMS -> ER)
     *
     * 본 API는 EMS 시스템에서만 호출 가능합니다.
     * EMS 시스템은 본 API를 호출하여 응급환자 수용 요청을 합니다.
     *
     * 요청생성은 현재 담당중인 환자정보를 기반으로 요청을 생성합니다.
     * (patient_status가 PENDING인 환자정보를 기반으로 요청을 생성)
     */
    post: {
      responses: {
        /** @description 요청된 병원 리스트 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ReqEmsToErResponse.createEmsToErRequest_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
        /** @description PENDING_PATIENT_NOT_FOUND */
        "404.1": {
          content: {
            "application/json": components["schemas"]["REQ_EMS_TO_ER_ERROR.PENDING_PATIENT_NOT_FOUND"];
          };
        };
        /** @description REQUEST_ALREADY_PROCESSED */
        "400.1": {
          content: {
            "application/json": components["schemas"]["REQ_EMS_TO_ER_ERROR.REQUEST_ALREADY_PROCESSED"];
          };
        };
      };
    };
  };
  "/requests/ems-to-er/ems": {
    /**
     * 2023-10-08 EMS to Er 요청 리스트 조회 API - EMS
     * @description ems to er 요청 리스트 조회 API - EMS
     *
     * EMS 직원 본인이 생성한 요청 리스트를 조회하는 API 입니다.
     *
     * 본 API는 EMS 시스템에서만 호출 가능합니다.
     * EMS 시스템은 본 API를 호출하여 EMS 직원 본인이 생성한 요청 리스트를 조회합니다.
     * query를 통해 요청 리스트를 필터링 할 수 있습니다.
     *
     * ## query
     *    - page?: number;
     *        - default: 1
     *    - limit?: number;
     *        - default: 10
     *    - search?: string;
     *        - 검색어
     *    - search_type?: 'ambulance_company_name' | 'patient_name' | 'patient_symptom_summary';
     *        - 검색 타입
     *    - request_status?: RequestStatus[];
     *        - 요청 상태 필터링
     *    - patient_gender?: Gender[];
     *        - 환자 성별 필터링
     *    - patient_severity?: ems_Severity[];
     *        - 환자 중증도 필터링
     *    - request_start_date?: string & tags.Format<'date-time'>; // 요청 시작 날짜 및 시간
     *        - 요청 시작 날짜 및 시간
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ReqEmsToErRequest.GetEmsToErRequestListQuery"];
        };
      };
      responses: {
        /** @description ems to er 요청 리스트 및 요청 리스트 개수 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ReqEmsToErResponse.getEmsToErRequestList_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
  };
  "/requests/ems-to-er/er": {
    /**
     * 2023-10-08 EMS to Er 요청 리스트 조회 API - ER
     * @description ems to er 요청 리스트 조회 API - ER
     *
     * ER에 해당하는 요청 리스트를 조회하는 API 입니다.
     *
     * 본 API는 ER 시스템에서만 호출 가능합니다.
     * ER 시스템은 본 API를 호출하여 ER에 해당하는 요청 리스트를 조회합니다.
     *
     *  - ER이 조회시 REQUESTED 상태인 요청은 VIEWED로 변경
     *  - 요청을 조회하면 해당 요청은 VIEWED 상태로 변경됩니다.
     *
     * ## query
     *    - page?: number;
     *        - default: 1
     *    - limit?: number;
     *        - default: 10
     *    - search?: string;
     *        - 검색어
     *    - search_type?: 'ambulance_company_name' | 'patient_name' | 'patient_symptom_summary';
     *        - 검색 타입
     *    - request_status?: RequestStatus[];
     *        - 요청 상태 필터링
     *    - patient_gender?: Gender[];
     *        - 환자 성별 필터링
     *    - patient_severity?: ems_Severity[];
     *        - 환자 중증도 필터링
     *    - request_start_date?: string & tags.Format<'date-time'>; // 요청 시작 날짜 및 시간
     *        - 요청 시작 날짜 및 시간
     */
    get: {
      parameters: {
        query: {
          query: components["schemas"]["ReqEmsToErRequest.GetEmsToErRequestListQuery"];
        };
      };
      responses: {
        /** @description ems to er 요청 리스트 및 요청 리스트 개수 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ReqEmsToErResponse.getEmsToErRequestList_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
      };
    };
  };
  "/requests/ems-to-er/{patient_id}": {
    /**
     * 2023-10-08 EMS to Er 요청 수락/거절 API - ER
     * @description ems to er 요청 수락/거절 API - ER
     *
     * ER에서 요청에 대한 수락/거절을 응답하는 API 입니다.
     *
     * 본 API는 ER 시스템에서만 호출 가능합니다.
     * ER 시스템은 본 API를 호출하여 ER에서 요청에 대한 수락/거절을 응답합니다.
     *
     *  - ER이 요청에 대한 응답을 하면 해당 요청은 ACCEPTED/REJECTED 상태로 변경됩니다.
     *  - 요청을 응답하면 해당 요청은 ACCEPTED/REJECTED 상태로 변경됩니다.
     *  - 만약 응답이 ACCEPTED라면 해당 요청의 다른 요청은 COMPLETED 상태로 변경됩니다.
     *
     * ## body
     *    - response: 'ACCEPTED' | 'REJECTED';
     *        - 응답
     *
     * ## param
     *    - patient_id: string;
     *        - 환자 id
     */
    post: {
      parameters: {
        path: {
          patient_id: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReqEmsToErRequest.RespondEmsToErRequestDto"];
        };
      };
      responses: {
        /** @description null */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_undefined_gt_"];
          };
        };
        /** @description AUTH_ERROR.FORBIDDEN */
        403: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.FORBIDDEN"];
          };
        };
        /** @description REQUEST_ALREADY_PROCESSED */
        "400.1": {
          content: {
            "application/json": components["schemas"]["REQ_EMS_TO_ER_ERROR.REQUEST_ALREADY_PROCESSED"];
          };
        };
        /** @description REQUEST_NOT_FOUND */
        "404.1": {
          content: {
            "application/json": components["schemas"]["REQ_EMS_TO_ER_ERROR.REQUEST_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/auth": {
    /**
     * 2023-09-30 - 로그인 상태 확인 및 토큰 재발급 API
     * @description 로그인 상태 확인 및 토큰 재발급
     *
     * - 로그인 상태를 확인하고, 토큰을 재발급한다.
     * - refresh_token이 존재하면, access_token을 재발급한다.
     * - refresh_token이 존재하지 않으면, 로그인 상태가 아니므로, is_login: false를 반환한다.
     * - refresh_token이 만료되면, 로그인 상태가 아니므로, is_login: false를 반환한다.
     */
    get: {
      responses: {
        /** @description 로그인 상태 확인 및 토큰 재발급 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_EmsAuthResponse.CheckAuthStatus_gt_"];
          };
        };
      };
    };
  };
  "/ems/auth/login": {
    /**
     * 2023-09-30 - 로그인 API
     * @description 로그인 API
     *
     * - 로그인을 한다.
     * ## 로그인 성공시
     * - access_token, refresh_token을 발급한다.
     * - access_token, refresh_token을 쿠키에 저장한다.
     * - employee를 반환한다.
     *
     * ## 로그인 실패시
     * - 로그인 실패시, 에러를 반환한다.
     *    - 400 - 직원 아이디가 존재하지 않음.
     *    - 400 - 비밀번호가 틀림.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["EmsAuthRequest.LoginDTO"];
        };
      };
      responses: {
        /** @description 로그인 성공 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_EmsAuthResponse.Login_gt_"];
          };
        };
        /** @description 직원 아이디가 존재하지 않음. */
        400: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.EMPLOYEE_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/ems/auth/logout": {
    /**
     * 2023-09-30 - 로그아웃 API
     * @description 로그아웃
     * - 로그아웃을 한다.
     * - 로그아웃시, refresh_token과 access_token을 쿠키에서 삭제한다.
     */
    post: {
      responses: {
        /** @description 로그아웃 */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_EmsAuthResponse.Logout_gt_"];
          };
        };
      };
    };
  };
  "/er/auth": {
    /**
     * 2023-09-30 - 로그인 상태 확인 및 토큰 재발급 API
     * @description 로그인 상태 확인 및 토큰 재발급
     *
     * - 로그인 상태를 확인하고, 토큰을 재발급한다.
     * - refresh_token이 존재하면, access_token을 재발급한다.
     * - refresh_token이 존재하지 않으면, 로그인 상태가 아니므로, is_login: false를 반환한다.
     * - refresh_token이 만료되면, 로그인 상태가 아니므로, is_login: false를 반환한다.
     */
    get: {
      responses: {
        /** @description 200 - 로그인 상태 확인 및 토큰 재발급 */
        200: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErAuthResponse.CheckAuthStatus_gt_"];
          };
        };
      };
    };
  };
  "/er/auth/login": {
    /**
     * 2023-09-30 - 로그인 API
     * @description 로그인 API
     *
     * - 로그인을 한다.
     * ## 로그인 성공시
     * - 로그인 성공시, access_token과 refresh_token을 발급한다.
     * - 로그인 성공시, refresh_token과 access_token을 쿠키에 저장한다.
     * - 로그인 성공시, employee 정보를 반환한다.
     * ## 로그인 실패시
     * - 로그인 실패시, 에러를 반환한다.
     * - 로그인 실패시, refresh_token과 access_token을 쿠키에 저장하지 않는다.
     */
    post: {
      /** @description - 로그인 정보 */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ErAuthRequest.LoginDTO"];
        };
      };
      responses: {
        /** @description 로그인 */
        201: {
          content: {
            "application/json": components["schemas"]["ResponseDTO_lt_ErAuthResponse.Login_gt_"];
          };
        };
        /** @description 직원 아이디가 존재하지 않음. */
        400: {
          content: {
            "application/json": components["schemas"]["AUTH_ERROR.EMPLOYEE_NOT_FOUND"];
          };
        };
      };
    };
  };
  "/er/auth/logout": {
    /**
     * 2023-09-30 - 로그아웃 API
     * @description 로그아웃
     * - 로그아웃을 한다.
     * - 로그아웃시, refresh_token과 access_token을 쿠키에서 삭제한다.
     */
    post: {
      responses: {
        /** @description 로그아웃 */
        201: {
          content: {
            "application/json": components["schemas"]["Try_lt_ErAuthResponse.Logout_gt_"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "EMS_AMBULANCE_ERROR.AMBULANCE_NOT_FOUND": {
      /** @enum {string} */
      message: "AMBULANCE_NOT_FOUND";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "ResponseDTO_lt_EmsAmbulanceResponse.GetAmbulanceDetail_gt_": {
      result: components["schemas"]["EmsAmbulanceResponse.GetAmbulanceDetail"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsAmbulanceResponse.GetAmbulanceDetail": {
      ambulance_company: components["schemas"]["__type"];
      employees: components["schemas"]["_blt__space_ambulance_id:_space_string;_space_employee_id:_space_string;_space_created_at:_space_Date;_space_status:_space_Status;_space_updated_at:_space_Date;_space__bgt__space__and__space__blt__space_employee:_space_Pick_lt__blt__space_employee_id:_space_string;_space_ambulance_company_id:_space_string;_space_employee_name:_space_string;_space_role:_space_ems_EmployeeRole;_space_id_card:_space_string;_space_password:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__comma__space__doublequote_employee_id_doublequote__space__or__space__doublequote_employee_name_doublequote__space__or__space__doublequote_id_card_doublequote__space__or__space__doublequote_role_doublequote__gt_;_space__bgt_"][];
      ambulance_id: string;
      ambulance_company_id: string;
      ambulance_type: components["schemas"]["ems_AmbulanceType"];
      ambulance_number: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    __type: {
      ambulance_company_id: string;
      ambulance_company_name: string;
      ambulance_company_representative: string | null;
      ambulance_company_area: string;
      ambulance_company_address: string | null;
      ambulance_company_phone: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    /** @enum {string} */
    Status: "ACTIVE" | "INACTIVE" | "DELETED";
    "_blt__space_ambulance_id:_space_string;_space_employee_id:_space_string;_space_created_at:_space_Date;_space_status:_space_Status;_space_updated_at:_space_Date;_space__bgt__space__and__space__blt__space_employee:_space_Pick_lt__blt__space_employee_id:_space_string;_space_ambulance_company_id:_space_string;_space_employee_name:_space_string;_space_role:_space_ems_EmployeeRole;_space_id_card:_space_string;_space_password:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__comma__space__doublequote_employee_id_doublequote__space__or__space__doublequote_employee_name_doublequote__space__or__space__doublequote_id_card_doublequote__space__or__space__doublequote_role_doublequote__gt_;_space__bgt_": {
      ambulance_id: string;
      employee_id: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      status: components["schemas"]["Status"];
      /** Format: date-time */
      updated_at: string;
      employee: components["schemas"]["Pick_lt___type_comma__space__doublequote_employee_id_doublequote__space__or__space__doublequote_employee_name_doublequote__space__or__space__doublequote_id_card_doublequote__space__or__space__doublequote_role_doublequote__gt_"];
    };
    Pick_lt___type_comma__space__doublequote_employee_id_doublequote__space__or__space__doublequote_employee_name_doublequote__space__or__space__doublequote_id_card_doublequote__space__or__space__doublequote_role_doublequote__gt_: {
      employee_id: string;
      employee_name: string;
      id_card: string;
      role: components["schemas"]["ems_EmployeeRole"];
    };
    /** @enum {string} */
    ems_EmployeeRole: "ADMIN" | "DRIVER" | "EMERGENCY_MEDICAL_TECHNICIAN" | "DISPATCHER";
    /** @enum {string} */
    ems_AmbulanceType: "GENERAL" | "SPECIAL" | "BOX_TYPE" | "NEGATIVE_PRESSURE";
    "EmsAmbulanceRequest.SetAmbulanceEmployeesDTO": {
      /**
       * 직원의 고유 아이디 리스트
       * @description 구급차량에 등록할 직원들의 고유 아이디 리스트
       *
       * 해당 id는 로그인에 사용되는 id_card와 다름
       */
      employee_list: components["schemas"]["__type.o1"][];
    };
    "__type.o1": {
      employee_id: string;
      /** @enum {string} */
      action: "ADD" | "REMOVE";
    };
    "AUTH_ERROR.FORBIDDEN": {
      /** @enum {string} */
      message: "Forbidden";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 403;
    };
    "EMS_AMBULANCE_ERROR.EMPLOYEE_NOT_FOUND": {
      /** @enum {string} */
      message: "EMPLOYEE_NOT_FOUND";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "EMS_AMBULANCE_ERROR.EMPLOYEE_ALREADY_ASSIGNED": {
      /** @enum {string} */
      message: "EMPLOYEE_ALREADY_ASSIGNED";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 409;
    };
    "EMS_AMBULANCE_ERROR.EMPLOYEE_NOT_ASSIGNED": {
      /** @enum {string} */
      message: "EMPLOYEE_NOT_ASSIGNED";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 409;
    };
    ResponseDTO_lt__doublequote_SUCCESS_doublequote__gt_: {
      /** @enum {string} */
      result: "SUCCESS";
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsAmbulanceCompanyRequest.GetAmbulanceCompanyListQuery": {
      /**
       * 페이지 번호
       * @default 1
       */
      page?: number;
      /**
       * 페이지당 아이템 갯수
       * @default 10
       */
      limit?: number;
      /** 검색어 */
      search?: string;
      /**
       * 도시
       * @description 예: 서울, 부산, 충남....
       */
      city?: string[];
      /**
       * 지역
       * @description 예: 강남, 가평, 아산 .....
       */
      area?: string[];
      /**
       * 구급차량 타입
       * @description 보유중인 구급차량 타입
       */
      ambulance_type?: ("GENERAL" | "SPECIAL" | "BOX_TYPE" | "NEGATIVE_PRESSURE")[];
    };
    "Try_lt_EmsAmbulanceCompanyResponse.GetAmbulanceCompanyList_gt_": {
      result: components["schemas"]["EmsAmbulanceCompanyResponse.GetAmbulanceCompanyList"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsAmbulanceCompanyResponse.GetAmbulanceCompanyList": {
      ambulance_company_list: components["schemas"]["__type"][];
      count: number;
    };
    "EMS_AMBULANCE_COMPANY_ERROR.AMBULANCE_COMPANY_NOT_FOUND": {
      /** @enum {string} */
      message: "AMBULANCE_COMPANY_NOT_FOUND";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "ResponseDTO_lt_EmsAmbulanceCompanyResponse.GetAmbulanceCompanyDetail_gt_": {
      result: components["schemas"]["EmsAmbulanceCompanyResponse.GetAmbulanceCompanyDetail"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsAmbulanceCompanyResponse.GetAmbulanceCompanyDetail": {
      ambulances: components["schemas"]["__type.o2"][];
      ambulance_company_id: string;
      ambulance_company_name: string;
      ambulance_company_representative: string | null;
      ambulance_company_area: string;
      ambulance_company_address: string | null;
      ambulance_company_phone: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o2": {
      ambulance_id: string;
      ambulance_company_id: string;
      ambulance_type: components["schemas"]["ems_AmbulanceType"];
      ambulance_number: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "EmsEmployeeRequest.GetEmployeeListQuery": {
      /**
       * 페이지 번호
       * @default 1
       */
      page?: number;
      /**
       * 페이지당 아이템 갯수
       * @default 10
       */
      limit?: number;
      /**
       * 직원 role
       * @description role filter
       */
      role?: ("ADMIN" | "DRIVER" | "EMERGENCY_MEDICAL_TECHNICIAN" | "DISPATCHER")[];
      /**
       * 검색 타입
       * @enum {string}
       */
      search_type?: "employee_name" | "id_card";
      /** 검색어 */
      search?: string;
    };
    "Try_lt_EmsEmployeeResponse.GetEmployeeList_gt_": {
      result: components["schemas"]["EmsEmployeeResponse.GetEmployeeList"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsEmployeeResponse.GetEmployeeList": {
      /**
       * 직원 리스트
       * @description 직원 리스트
       */
      employee_list: components["schemas"]["Omit_lt___type_comma__space__doublequote_password_doublequote__gt_"][];
      /**
       * 직원 수
       * @description 직원 수
       */
      count: number;
    };
    Omit_lt___type_comma__space__doublequote_password_doublequote__gt_: {
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      employee_id: string;
      employee_name: string;
      id_card: string;
      role: components["schemas"]["ems_EmployeeRole"];
      ambulance_company_id: string;
    };
    "EmsEmployeeRequest.CreateManyDTO": {
      /**
       * CreateManyDTO
       * @description 직원들을 한번에 많이 생성할때 사용
       */
      employees: components["schemas"]["EmsEmployeeRequest.CreateDTO"][];
    };
    "EmsEmployeeRequest.CreateDTO": {
      /**
       * 지원 이름
       * @description 지원 이름
       */
      employee_name: string;
      /**
       * 직원 고유 아이디
       * @description 지원 고유 아이디, 각 병워별로 중복되지 않아야함
       */
      id_card: string;
      /** 비밀번호 */
      password: string;
      /**
       * 직원의 역할
       * @description 직원의 ROLE - ADMIN, DOCTOR, NURSE, EMT
       * @enum {string}
       */
      role: "ADMIN" | "DRIVER" | "EMERGENCY_MEDICAL_TECHNICIAN" | "DISPATCHER";
      employee_id?: string;
      ambulance_company_id?: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** @enum {string} */
      status?: "ACTIVE" | "INACTIVE" | "DELETED";
    };
    "EMS_EMPLOYEE_ERROR.EMPLOYEE_MULTIPLE_ALREADY_EXIST": {
      /** @enum {string} */
      message: "EMPLOYEE_MULTIPLE_ALREADY_EXIST";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_EmsEmployeeResponse.CreateManyEmployee_gt_": {
      result: components["schemas"]["EmsEmployeeResponse.CreateManyEmployee"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsEmployeeResponse.CreateManyEmployee": {
      /**
       * 생성된 직원의 수
       * @description 생성된 직원의 수
       */
      count: number;
    };
    "EmsEmployeeRequest.CheckManyExistDTO": {
      /**
       * 직원의 고유 아이디 리스트
       * @description 중복체크할 직원의 고유 아이디 리스트
       */
      id_cards: string[];
    };
    "Try_lt_EmsEmployeeResponse.CheckManyEmployeeExist_gt_": {
      result: components["schemas"]["EmsEmployeeResponse.CheckManyEmployeeExist"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsEmployeeResponse.CheckManyEmployeeExist": {
      /**
       * 존재하는 직원의 수
       * @description 존재하는 직원의 수
       */
      exists: components["schemas"]["Pick_lt___type_comma__space__doublequote_id_card_doublequote__gt_"][];
    };
    Pick_lt___type_comma__space__doublequote_id_card_doublequote__gt_: {
      id_card: string;
    };
    "EmsEmployeeRequest.UpdatePasswordDTO": {
      /** 현재 비밀번호 */
      now_password: string;
      /** 변경할 비밀번호 */
      password: string;
    };
    "EMS_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND": {
      /** @enum {string} */
      message: "EMPLOYEE_NOT_FOUND";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "EMS_EMPLOYEE_ERROR.EMPLOYEE_PASSWORD_INVALID": {
      /** @enum {string} */
      message: "EMPLOYEE_PASSWORD_INVALID";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "EMS_EMPLOYEE_ERROR.EMPLOYEE_PASSWORD_SAME": {
      /** @enum {string} */
      message: "EMPLOYEE_PASSWORD_SAME";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_EmsEmployeeResponse.UpdatePassword_gt_": {
      result: components["schemas"]["EmsEmployeeResponse.UpdatePassword"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsEmployeeResponse.UpdatePassword": {
      update_success: boolean;
    };
    "EMS_EMPLOYEE_ERROR.EMPLOYEE_ADMIN_NOT_DELETE": {
      /** @enum {string} */
      message: "EMPLOYEE_ADMIN_NOT_DELETE";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "EmsPatientRequest.CreatePatientDTO": {
      /**
       * 환자 이름
       * @description 환자이름을 입렵하세요
       * 이름을 모를시 '익명'으로 입력
       */
      patient_name: string;
      /**
       * 환자 생년월일
       * @description 환자의 생년월일을 입력하세요
       *
       * 혼수상태등의 이유로 알수없는 경우
       * 00000000 으로 입력
       */
      patient_birth: string;
      /**
       * 환자 주민등록번호 뒷자리
       * @description 환자의 주민등록번호 뒷자리 7자리를 입력하세요
       *
       * 혼수상태등의 이유로 알수없는 경우
       * 00000000 으로 입력
       */
      patient_identity_number: string;
      /**
       * 환자 성별
       * @description 환자의 성별을 입력하세요
       * @enum {string}
       */
      patient_gender: "FEMALE" | "MALE";
      /**
       * 환자 연락처
       * @description 환자의 연락처를 입력하세요
       *
       * 혼수상태등의 이유로 알수없는 경우
       * 00000000000 으로 입력
       */
      patient_phone: string;
      /**
       * 환자 주소
       * @description 환자의 주소를 입력하세요
       *
       * 혼수상태등의 이유로 알수없는 경우
       * '알수없음' 으로 입력
       */
      patient_address: string;
      /**
       * 환자 위도
       * @description 환자의 위도를 입력하세요
       */
      patient_latitude: number;
      /**
       * 환자 경도
       * @description 환자의 경도를 입력하세요
       */
      patient_longitude: number;
      /**
       * 환자 상태
       * @description 환자의 상태를 입력하세요
       * @enum {string}
       */
      patient_severity: "UNKNOWN" | "SEVERE" | "MILD" | "NONE";
      /**
       * 환자 응급사유
       * @description 환자의 응급사유를 입력하세요
       * @enum {string}
       */
      patient_emergency_cause: "TRAFFIC_ACCIDENT" | "FIRE" | "CRIMINAL" | "DISASTER" | "DISEASE" | "OTHER";
      patient_guardian?: components["schemas"]["EmsPatientRequest.PatientGuardianDTO"];
    };
    "EmsPatientRequest.PatientGuardianDTO": {
      /**
       * 보호자 이름
       * @description 보호자 이름을 입력하세요
       */
      guardian_name: string;
      /**
       * 보호자 연락처
       * @description 보호자 연락처를 입력하세요
       */
      guardian_phone: string;
      /**
       * 보호자 주소
       * @description 보호자 주소를 입력하세요
       */
      guardian_address: string;
      /**
       * 보호자 관계
       * @description 보호자 관계를 입력하세요
       * @enum {string}
       */
      guardian_relation: "OTHER" | "PARENT" | "SPOUSE" | "CHILD" | "SIBLING" | "FRIEND";
    };
    "EMS_PATIENT_ERROR.INCHARGED_PATIENT_ALREADY_EXIST": {
      /** @enum {string} */
      message: "INCHARGED_PATIENT_ALREADY_EXIST";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_EmsPatientResponse.CreatePatient_gt_": {
      result: components["schemas"]["EmsPatientResponse.CreatePatient"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsPatientResponse.CreatePatient": {
      patient_id: string;
    };
    "EmsPatientRequest.GetPatientListQuery": {
      page?: number;
      limit?: number;
      search?: string;
      /** @enum {string} */
      search_type?: "patient_name" | "patient_birth" | "patient_phone";
      patient_status?: ("PENDING" | "REQUESTED" | "ACCEPTED" | "CANCELED" | "COMPLETED")[];
      patient_severity?: ("UNKNOWN" | "SEVERE" | "MILD" | "NONE")[];
      patient_emergency_cause?: ("TRAFFIC_ACCIDENT" | "FIRE" | "CRIMINAL" | "DISASTER" | "DISEASE" | "OTHER")[];
      /** @enum {string} */
      gender?: "FEMALE" | "MALE";
    };
    "Try_lt_EmsPatientResponse.GetPatientList_gt_": {
      result: components["schemas"]["EmsPatientResponse.GetPatientList"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsPatientResponse.GetPatientList": {
      patient_list: components["schemas"]["Omit_lt___type_comma__space__doublequote_patient_identity_number_doublequote__gt_"][];
      count: number;
    };
    Omit_lt___type_comma__space__doublequote_patient_identity_number_doublequote__gt_: {
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      /** @description 익명으로 기본값 */
      patient_name: string;
      /** @description 생년월일 0000-00-00 형식 0000-00-00은 미상 */
      patient_birth: string;
      /** @description 000-0000-0000 형식 000-0000-0000은 미상 */
      patient_phone: string;
      patient_id: string;
      /** @description 환자 주소 미상으로 기본값 */
      patient_address: string;
      patient_gender: components["schemas"]["Gender"];
      /** @description 위도 - 사고지점 */
      patient_latitude: number;
      /** @description 경도 - 사고지점 */
      patient_longitude: number;
      patient_severity: components["schemas"]["ems_Severity"];
      patient_emergency_cause: components["schemas"]["ems_IncidentCause"];
      guardian_id: string | null;
      ems_employee_id: string;
      /** Format: date-time */
      complete_date: string;
      patient_status: components["schemas"]["ems_PatientStatus"];
    };
    /** @enum {string} */
    Gender: "FEMALE" | "MALE";
    /** @enum {string} */
    ems_Severity: "UNKNOWN" | "SEVERE" | "MILD" | "NONE";
    /** @enum {string} */
    ems_IncidentCause: "TRAFFIC_ACCIDENT" | "FIRE" | "CRIMINAL" | "DISASTER" | "DISEASE" | "OTHER";
    /** @enum {string} */
    ems_PatientStatus: "PENDING" | "REQUESTED" | "ACCEPTED" | "CANCELED" | "COMPLETED";
    "EMS_PATIENT_ERROR.PATIENT_NOT_FOUND": {
      /** @enum {string} */
      message: "PATIENT_NOT_FOUND";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "ResponseDTO_lt_EmsPatientResponse.GetPatientDetail_gt_": {
      result: components["schemas"]["EmsPatientResponse.GetPatientDetail"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsPatientResponse.GetPatientDetail": {
      guardian: components["schemas"]["__type.o3.Nullable"];
      abcde: components["schemas"]["__type.o4"][];
      dcap_btls: components["schemas"]["__type.o5"][];
      vs: components["schemas"]["__type.o6"][];
      sample: components["schemas"]["__type.o7"][];
      opqrst: components["schemas"]["__type.o8"][];
      patient_id: string;
      /** @description 익명으로 기본값 */
      patient_name: string;
      /** @description 생년월일 0000-00-00 형식 0000-00-00은 미상 */
      patient_birth: string;
      patient_identity_number: string;
      /** @description 000-0000-0000 형식 000-0000-0000은 미상 */
      patient_phone: string;
      /** @description 환자 주소 미상으로 기본값 */
      patient_address: string;
      patient_gender: components["schemas"]["Gender"];
      /** @description 위도 - 사고지점 */
      patient_latitude: number;
      /** @description 경도 - 사고지점 */
      patient_longitude: number;
      patient_severity: components["schemas"]["ems_Severity"];
      patient_emergency_cause: components["schemas"]["ems_IncidentCause"];
      guardian_id: string | null;
      ems_employee_id: string;
      /** Format: date-time */
      complete_date: string;
      patient_status: components["schemas"]["ems_PatientStatus"];
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o3.Nullable": {
      guardian_id: string;
      guardian_name: string;
      guardian_phone: string;
      guardian_address: string;
      guardian_relation: components["schemas"]["ems_GuardianRelation"];
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    } | null;
    /** @enum {string} */
    ems_GuardianRelation: "OTHER" | "PARENT" | "SPOUSE" | "CHILD" | "SIBLING" | "FRIEND";
    "__type.o4": {
      patient_id: string;
      airway_status: components["schemas"]["ems_AirwayStatus"];
      /** @description 호흡수 //단위 횟수/분 */
      breathing_rate: number;
      breathing_quality: components["schemas"]["ems_BreathingQuality"];
      circulation_pulse: number;
      /** @description 수축기 혈압 //단위 mmHg */
      circulation_systolic_blood_pressure: number;
      /** @description 이완기 혈압 //단위 mmHg */
      circulation_diastolic_blood_pressure: number;
      disability_avpu: components["schemas"]["ems_DisabilityAVPU"];
      /** @description 노출 상태 : 외상, 화상, 발진, 저체온, 기타노출에 대한 상세 내용 */
      exposure_notes: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    /** @enum {string} */
    ems_AirwayStatus: "OPEN" | "PARTIALLY_OBSTRUCTED" | "OBSTRUCTED" | "INTUBATED" | "UNKNOWN";
    /** @enum {string} */
    ems_BreathingQuality: "NORMAL" | "SHALLOW" | "DEEP" | "LABORED" | "IRREGULAR" | "RAPID" | "SLOW" | "AGONAL";
    /** @enum {string} */
    ems_DisabilityAVPU: "ALERT" | "VERBAL_STIMULI" | "PAIN_STIMULI" | "UNRESPONSIVE";
    "__type.o5": {
      patient_id: string;
      affected_area: components["schemas"]["ems_AffectedArea"];
      deformity: string;
      contusion: string;
      abrasion: string;
      puncture: string;
      burn: string;
      tenderness: string;
      laceration: string;
      swelling: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    /** @enum {string} */
    ems_AffectedArea: "UNKNOWN" | "HEAD" | "NECK" | "CHEST" | "ABDOMEN" | "LEFT_ARM" | "RIGHT_ARM" | "LEFT_LEG" | "RIGHT_LEG" | "BACK" | "PELVIS";
    "__type.o6": {
      patient_id: string;
      /** @description 심박수 맥박 //단위 횟수/분 */
      heart_rate: number;
      /** @description 호흡수  //단위 횟수/분 */
      respiratory_rate: number;
      /** @description 수축기 혈압 //단위 mmHg */
      systolic_blood_pressure: number;
      /** @description 이완기 혈압 //단위 mmHg */
      diastolic_blood_pressure: number;
      /** @description 체온 //단위 ℃ */
      temperature: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o7": {
      patient_id: string;
      /** @description 증상 및 증후 */
      signs_symptoms: string;
      /** @description 알레르기 */
      allergies: string;
      /** @description 복용중인 약물 */
      medications: string;
      /** @description 과거 병력 */
      past_medical_history: string;
      /**
       * Format: date-time
       * @description "1970-01-01T00:00:00Z" 미상 //유닉스 타임스탬프
       */
      last_oral_intake: string;
      /** @description 발병 전 사건 - 무엇을 하고있었는지. */
      events_leading_to_illness: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o8": {
      patient_id: string;
      /** @description 발병상황 - 증상이 시작되었을 때 와 무엇을 하고있었고, 통증은 언제부터 시작됬는지 */
      onset: string;
      /** @description 유발요인 */
      provocation: string;
      /** @description 특징 -- 쥐어짜듯이, 찢어지듯이 ... */
      quality: string;
      /** @description 방사 전이, 아픔이 다른 곳으로 옮겨가거나 다른 관련 증상은 없는지 */
      radiation: string;
      /** @description 심각도 1~10 */
      severity: number;
      /** Format: date-time */
      time: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "EmsPatientRequest.CreateABCDEAssessmentDTO": {
      /** @enum {string} */
      airway_status: "OPEN" | "PARTIALLY_OBSTRUCTED" | "OBSTRUCTED" | "INTUBATED" | "UNKNOWN";
      /**
       * 분당 호흡수
       * @description 호흡수 //단위 횟수/분
       */
      breathing_rate: number;
      /**
       * 호흡 품질
       * @description 호흡 품질 //정상, 불규칙, 얕음, 느림, 빠름, 기타호흡에 대한 상세 내용
       * @enum {string}
       */
      breathing_quality: "NORMAL" | "SHALLOW" | "DEEP" | "LABORED" | "IRREGULAR" | "RAPID" | "SLOW" | "AGONAL";
      /**
       * 분당 심장박동수
       * @description 심장박동수 //단위 횟수/분
       */
      circulation_pulse: number;
      /**
       * 수축기 혈압
       * @description 수축기 혈압 //단위 mmHg
       */
      circulation_systolic_blood_pressure: number;
      /**
       * 이완기 혈압
       * @description 이완기 혈압 //단위 mmHg
       */
      circulation_diastolic_blood_pressure: number;
      /**
       * 의식 상태
       * @description 의식 상태
       * @enum {string}
       */
      disability_avpu: "ALERT" | "VERBAL_STIMULI" | "PAIN_STIMULI" | "UNRESPONSIVE";
      /**
       * 노출 상태
       * @description 노출 상태 : 외상, 화상, 발진, 저체온, 기타노출에 대한 상세 내용
       */
      exposure_notes: string;
    };
    "EMS_PATIENT_ERROR.FORBIDDEN": {
      /** @enum {string} */
      message: "FORBIDDEN";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 403;
    };
    ResponseDTO_lt___type_gt_: {
      result: components["schemas"]["__type.o4"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsPatientRequest.CreateDCAP_BTLSAssessmentDTO": {
      /**
       * 부위
       * @description 부위
       * @enum {string}
       */
      affected_area: "UNKNOWN" | "HEAD" | "NECK" | "CHEST" | "ABDOMEN" | "LEFT_ARM" | "RIGHT_ARM" | "LEFT_LEG" | "RIGHT_LEG" | "BACK" | "PELVIS";
      /**
       * 변형
       * @description 변형
       */
      deformity: string;
      /**
       * 멍
       * @description 멍
       */
      contusion: string;
      /**
       * 찰과상
       * @description 찰과상
       */
      abrasion: string;
      /**
       * 찔림상
       * @description 찔림상
       */
      puncture: string;
      /**
       * 화상
       * @description 화상
       */
      burn: string;
      /**
       * 통증
       * @description 통증
       */
      tenderness: string;
      /**
       * 찢김상
       * @description 찢김상
       */
      laceration: string;
      /**
       * 부어오름
       * @description 부어오름
       */
      swelling: string;
    };
    "ResponseDTO_lt___type_gt_.o1": {
      result: components["schemas"]["__type.o5"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsPatientRequest.CreateVSAssessmentDTO": {
      /**
       * 심박수 맥박
       * @description 심박수 맥박 //단위 횟수/분
       */
      heart_rate: number;
      /**
       * 호흡수
       * @description 호흡수  //단위 횟수/분
       */
      respiratory_rate: number;
      /**
       * 수축기 혈압
       * @description 수축기 혈압 //단위 mmHg
       */
      systolic_blood_pressure: number;
      /**
       * 이완기 혈압
       * @description 이완기 혈압 //단위 mmHg
       */
      diastolic_blood_pressure: number;
      /**
       * 체온
       * @description 체온 //단위 ℃
       */
      temperature: number;
    };
    "ResponseDTO_lt___type_gt_.o2": {
      result: components["schemas"]["__type.o6"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsPatientRequest.CreateSAMPLEAssessmentDTO": {
      /**
       * 증상 및 증후
       * @description 증상 및 증후
       */
      signs_symptoms: string;
      /**
       * 알레르기
       * @description 알레르기
       */
      allergies: string;
      /**
       * 복용중인 약물
       * @description 복용중인 약물
       */
      medications: string;
      /**
       * 과거 병력
       * @description 과거 병력
       */
      past_medical_history: string;
      /**
       * 마지막 경구 섭취
       * Format: date-time
       * @description 마지막 경구 섭취
       */
      last_oral_intake: string;
      /**
       * 발병 전 사건
       * @description 발병 전 사건 - 무엇을 하고있었는지.
       */
      events_leading_to_illness: string;
    };
    "ResponseDTO_lt___type_gt_.o3": {
      result: components["schemas"]["__type.o7"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsPatientRequest.CreateOPQRSTAssessmentDTO": {
      /**
       * 발병상황 - 증상이 시작되었을 때 와 무엇을 하고있었고, 통증은 언제부터 시작됬는지
       * @description 증상이 시작되었을 때 와 무엇을 하고있었는지
       */
      onset: string;
      /**
       * 유발요인
       * @description 유발요인
       */
      provocation: string;
      /**
       * 통증의 특징
       * @description 통증의 특징
       */
      quality: string;
      /**
       * 통증의 위치
       * @description 통증의 위치
       */
      radiation: string;
      /**
       * 통증의 강도
       * @description 통증의 강도
       * 심각도 1~10
       */
      severity: number;
      /**
       * 통증 발현시간
       * Format: date-time
       * @description 통증 발현시간 //유닉스 타임스탬프 "1970-01-01T00:00:00Z" = 미상
       */
      time: string;
    };
    "ResponseDTO_lt___type_gt_.o4": {
      result: components["schemas"]["__type.o8"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EMS_PATIENT_ERROR.PATIENT_NOT_ACCEPTED": {
      /** @enum {string} */
      message: "PATIENT_NOT_ACCEPTED";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    ResponseDTO_lt_undefined_gt_: {
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "Try_lt_Array_lt__blt__space_doctor_specializations:_space__blt__space_doctor_specialization_id:_space_string;_space_doctor_specialization_name:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__bgt__space__and__space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__gt__gt_": {
      result: components["schemas"]["_blt__space_doctor_specializations:_space__blt__space_doctor_specialization_id:_space_string;_space_doctor_specialization_name:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__bgt__space__and__space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_"][];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "_blt__space_doctor_specializations:_space__blt__space_doctor_specialization_id:_space_string;_space_doctor_specialization_name:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__bgt__space__and__space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_": {
      doctor_specializations: components["schemas"]["__type.o9"][];
      department_id: number;
      department_name: string;
      parent_department_id: number | null;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o9": {
      doctor_specialization_id: string;
      doctor_specialization_name: string;
      department_id: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "ErDepartmentRequest.GetDepartmetQuery": {
      include?: ("doctor_specializations" | "hospital" | "parent" | "sub")[];
    };
    "ER_DEPARTMENT_ERROR.DEPARTMENT_NOT_EXIST": {
      /** @enum {string} */
      message: "Department doesn't exist: ";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_ErDepartment.GetDepartment_gt_": {
      result: components["schemas"]["ErDepartment.GetDepartment"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErDepartment.GetDepartment": {
      department_id: number;
      department_name: string;
      parent_department_id: number | null;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      parent_department?: components["schemas"]["__type.o10.Nullable"];
      sub_departments?: components["schemas"]["__type.o10"][];
      doctor_specializations?: components["schemas"]["__type.o9"][];
      hospital_departments?: components["schemas"]["_blt__space_hospital_id:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_hospital?:_space__blt__space_hospital_id:_space_string;_space_hospital_name:_space_string;_space_hospital_address:_space_string;_space_hospital_type:_space_er_MedicalFacilityType;_space_hospital_phone:_space_string_space__or__space_null;_space_hospital_city:_space_string;_space_hospital_district:_space_string;_space_latitude:_space_number_space__or__space_null;_space_longitude:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__or__space_undefined;_space__bgt_"][];
    };
    "__type.o10.Nullable": ({
      department_id: number;
      department_name: string;
      parent_department_id: number | null;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    }) | null;
    "__type.o10": {
      department_id: number;
      department_name: string;
      parent_department_id: number | null;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "_blt__space_hospital_id:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_hospital?:_space__blt__space_hospital_id:_space_string;_space_hospital_name:_space_string;_space_hospital_address:_space_string;_space_hospital_type:_space_er_MedicalFacilityType;_space_hospital_phone:_space_string_space__or__space_null;_space_hospital_city:_space_string;_space_hospital_district:_space_string;_space_latitude:_space_number_space__or__space_null;_space_longitude:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__or__space_undefined;_space__bgt_": {
      hospital_id: string;
      department_id: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      hospital?: components["schemas"]["__type.o11"];
    };
    "__type.o11": {
      hospital_id: string;
      hospital_name: string;
      hospital_address: string;
      hospital_type: components["schemas"]["er_MedicalFacilityType"];
      hospital_phone: string | null;
      hospital_city: string;
      hospital_district: string;
      latitude: number | null;
      longitude: number | null;
      /**
       * Format: date-time
       * @description
       * default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    /** @enum {string} */
    er_MedicalFacilityType: "HOSPITAL" | "HEALTH_CENTER" | "HEALTH_MEDICAL_CENTER" | "HEALTH_SUB_CENTER" | "HEALTH_CLINIC" | "ADVANCED_GENERAL" | "NURSING_HOSPITAL" | "CLINIC" | "MENTAL_HOSPITAL" | "MATERNITY_CLINIC" | "GENERAL_HOSPITAL" | "DENTAL_HOSPITAL" | "DENTAL_CLINIC" | "ORIENTAL_HOSPITAL" | "ORIENTAL_CLINIC";
    "ErDepartmentRequest.GetDepartmentListQuery": {
      status?: ("ACTIVE" | "INACTIVE" | "DELETED")[];
    };
    "ER_ERROR.ER_NOT_FOUND": {
      /** @enum {string} */
      message: "ER doesn't exist";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "ResponseDTO_lt_ErDepartment.GetHospitalDepartmentList_gt_": {
      result: components["schemas"]["ErDepartment.GetHospitalDepartmentList"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErDepartment.GetHospitalDepartmentList": components["schemas"]["__type.o12"][];
    "__type.o12": {
      department_id: number;
      status: components["schemas"]["Status"];
      department: components["schemas"]["__type.o13"];
    };
    "__type.o13": {
      department_id: number;
      department_name: string;
      parent_department_id: number | null;
    };
    "ErDepartmentRequest.UpdateHospitalDepartmentDto": {
      update_department_list: components["schemas"]["__type.o14"][];
    };
    "__type.o14": {
      /**
       * 진료과 id
       * @description 변경할 진료과 id
       */
      department_id: number;
      /**
       * 진료과 상태
       * @description 변경할 진료과 상태
       * @enum {string}
       */
      status: "ACTIVE" | "INACTIVE" | "DELETED";
    };
    Try_lt_string_gt_: {
      result: string;
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEmergencyCenterRequest.GetEmergencyCenterListQuery": {
      /** @default 1 */
      page?: number;
      /** @default 10 */
      limit?: number;
      search?: string;
      emergency_center_type?: ("NON_EMERGENCY_MEDICAL_INSTITUTION" | "LOCAL_EMERGENCY_MEDICAL_INSTITUTION" | "LOCAL_EMERGENCY_MEDICAL_CENTER" | "REGIONAL_EMERGENCY_MEDICAL_CENTER")[];
      emergency_room_available?: ("GENERAL" | "COHORT_ISOLATION" | "NEGATIVE_PRESSURE_ISOLATION" | "STANDARD_ISOLATION" | "PEDIATRIC" | "PEDIATRIC_NEGATIVE_PRESSURE_ISOLATION" | "PEDIATRIC_STANDARD_ISOLATION")[];
      /**
       * 응급센터가 있는 도시
       * @description 응급센터가 있는 도시
       */
      city?: string;
      /** 위도 */
      latitude: number;
      /** 경도 */
      longitude: number;
    };
    "Try_lt_DateToString_lt_ErEmergencyCenter.GetEmergencyCenterListQueryReturn_gt__gt_": {
      result: components["schemas"]["DateToString_lt_ErEmergencyCenter.GetEmergencyCenterListQueryReturn_gt_"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "DateToString_lt_ErEmergencyCenter.GetEmergencyCenterListQueryReturn_gt_": {
      emergency_center_list: components["schemas"]["DateToString_lt_GetEmergentcyCenterListQueryFindManyOuput_space__and__space__blt__space_distance:_space_number;_space__bgt__gt_"][];
      count: number;
    };
    "DateToString_lt_GetEmergentcyCenterListQueryFindManyOuput_space__and__space__blt__space_distance:_space_number;_space__bgt__gt_": {
      hospital: components["schemas"]["DateToString_lt___type_gt_"];
      emergency_rooms: components["schemas"]["DateToString_lt__blt__space_emergency_room_id:_space_string;_space_emergency_center_id:_space_string;_space_emergency_room_type:_space_er_EmergencyRoomType;_space_emergency_room_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_emergency_room_beds:_space__blt__space_emergency_room_id:_space_string;_space_emergency_room_bed_num:_space_number;_space_emergency_room_bed_status:_space_er_EmergencyRoomBedStatus;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__count:_space__blt__space_emergency_room_beds:_space_number;_space__bgt_;_space__bgt__gt_"][];
      emergency_center_id: string;
      hospital_id: string;
      emergency_center_type_code: string;
      emergency_center_type: components["schemas"]["er_MedicalInstitutionType"];
      emergency_center_name: string;
      emergency_center_address: string;
      emergency_center_primary_phone: string;
      emergency_center_secondary_phone: string | null;
      emergency_center_latitude: number;
      emergency_center_longitude: number;
      /** @description default */
      created_at: string;
      updated_at: string;
      status: components["schemas"]["Status"];
      distance: number;
    };
    DateToString_lt___type_gt_: {
      hospital_id: string;
      hospital_name: string;
      hospital_address: string;
      hospital_type: components["schemas"]["er_MedicalFacilityType"];
      hospital_phone: string | null;
      hospital_city: string;
      hospital_district: string;
      latitude: number | null;
      longitude: number | null;
      /**
       * @description
       * default
       */
      created_at: string;
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "DateToString_lt__blt__space_emergency_room_id:_space_string;_space_emergency_center_id:_space_string;_space_emergency_room_type:_space_er_EmergencyRoomType;_space_emergency_room_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_emergency_room_beds:_space__blt__space_emergency_room_id:_space_string;_space_emergency_room_bed_num:_space_number;_space_emergency_room_bed_status:_space_er_EmergencyRoomBedStatus;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__count:_space__blt__space_emergency_room_beds:_space_number;_space__bgt_;_space__bgt__gt_": {
      emergency_room_id: string;
      emergency_center_id: string;
      emergency_room_type: components["schemas"]["er_EmergencyRoomType"];
      emergency_room_name: string;
      /** @description default */
      created_at: string;
      updated_at: string;
      status: components["schemas"]["Status"];
      emergency_room_beds: components["schemas"]["DateToString_lt___type_gt_.o1"][];
      _count: components["schemas"]["DateToString_lt___type_gt_.o2"];
    };
    /** @enum {string} */
    er_EmergencyRoomType: "GENERAL" | "COHORT_ISOLATION" | "NEGATIVE_PRESSURE_ISOLATION" | "STANDARD_ISOLATION" | "PEDIATRIC" | "PEDIATRIC_NEGATIVE_PRESSURE_ISOLATION" | "PEDIATRIC_STANDARD_ISOLATION";
    "DateToString_lt___type_gt_.o1": {
      emergency_room_id: string;
      emergency_room_bed_num: number;
      emergency_room_bed_status: components["schemas"]["er_EmergencyRoomBedStatus"];
      /** @description default */
      created_at: string;
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    /** @enum {string} */
    er_EmergencyRoomBedStatus: "AVAILABLE" | "OCCUPIED" | "CLEANING" | "MAINTENANCE";
    "DateToString_lt___type_gt_.o2": {
      emergency_room_beds: number;
    };
    /** @enum {string} */
    er_MedicalInstitutionType: "NON_EMERGENCY_MEDICAL_INSTITUTION" | "LOCAL_EMERGENCY_MEDICAL_INSTITUTION" | "LOCAL_EMERGENCY_MEDICAL_CENTER" | "REGIONAL_EMERGENCY_MEDICAL_CENTER";
    "ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_NOT_FOUND": {
      /** @enum {string} */
      message: "Emergency room doesn't exist";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "ResponseDTO_lt_ErEmergencyCenter.GetEmergencyRoomByIdReturn_gt_": {
      result: components["schemas"]["ErEmergencyCenter.GetEmergencyRoomByIdReturn"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEmergencyCenter.GetEmergencyRoomByIdReturn": {
      emergency_room_beds: components["schemas"]["__type.o15"][];
      emergency_room_id: string;
      emergency_center_id: string;
      emergency_room_type: components["schemas"]["er_EmergencyRoomType"];
      emergency_room_name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o15": {
      emergency_room_bed_patient: components["schemas"]["__type.o16.Nullable"];
      emergency_room_id: string;
      emergency_room_bed_num: number;
      emergency_room_bed_status: components["schemas"]["er_EmergencyRoomBedStatus"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o16.Nullable": {
      patient: components["schemas"]["__type.o17"];
      emergency_room_id: string;
      emergency_room_bed_num: number;
      emergency_room_bed_status: components["schemas"]["er_EmergencyRoomBedStatus"];
      /** Format: date-time */
      log_date: string;
      patient_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    } | null;
    "__type.o17": {
      patient_name: string;
      patient_id: string;
      patient_birth: string;
      patient_identity_number: string;
      patient_gender: components["schemas"]["Gender"];
      patient_phone: string;
      patient_address: string;
      guardian_id: string | null;
      doctor_id: string;
      nurse_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "ER_EMERGENCY_CENTER_ERROR.EMERGENCY_CENTER_NOT_FOUND": {
      /** @enum {string} */
      message: "Emergency center doesn't exist";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "ResponseDTO_lt_ErEmergencyCenter.GetEmergencyCenterByIdReturn_gt_": {
      result: components["schemas"]["ErEmergencyCenter.GetEmergencyCenterByIdReturn"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEmergencyCenter.GetEmergencyCenterByIdReturn": {
      emergency_center_id: string;
      hospital_id: string;
      emergency_center_type_code: string;
      emergency_center_type: components["schemas"]["er_MedicalInstitutionType"];
      emergency_center_name: string;
      emergency_center_address: string;
      emergency_center_primary_phone: string;
      emergency_center_secondary_phone: string | null;
      emergency_center_latitude: number;
      emergency_center_longitude: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      hospital: components["schemas"]["_blt__space_hospital_id:_space_string;_space_hospital_name:_space_string;_space_hospital_address:_space_string;_space_hospital_type:_space_er_MedicalFacilityType;_space_hospital_phone:_space_string_space__or__space_null;_space_hospital_city:_space_string;_space_hospital_district:_space_string;_space_latitude:_space_number_space__or__space_null;_space_longitude:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_hospital_departments:_space_(_blt__space_hospital_id:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_department:_space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_)_alt__agt_;_space_hospital_medical_equipment:_space_(_blt__space_hospital_id:_space_string;_space_medical_equipment_id:_space_number;_space_medical_equipment_count:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_medical_equipment:_space__blt__space_medical_equipment_id:_space_number;_space_medical_equipment_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_)_alt__agt_;_space_hospital_servere_illness:_space_(_blt__space_hospital_id:_space_string;_space_servere_illness_id:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_servere_illness:_space__blt__space_servere_illness_id:_space_string;_space_servere_illness_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_)_alt__agt_;_space__bgt_"];
      emergency_rooms: components["schemas"]["_blt__space_emergency_room_id:_space_string;_space_emergency_center_id:_space_string;_space_emergency_room_type:_space_er_EmergencyRoomType;_space_emergency_room_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_emergency_room_beds:_space__blt__space_emergency_room_id:_space_string;_space_emergency_room_bed_num:_space_number;_space_emergency_room_bed_status:_space_er_EmergencyRoomBedStatus;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__count:_space__blt__space_emergency_room_beds:_space_number;_space__bgt_;_space__bgt_"][];
    };
    "_blt__space_hospital_id:_space_string;_space_hospital_name:_space_string;_space_hospital_address:_space_string;_space_hospital_type:_space_er_MedicalFacilityType;_space_hospital_phone:_space_string_space__or__space_null;_space_hospital_city:_space_string;_space_hospital_district:_space_string;_space_latitude:_space_number_space__or__space_null;_space_longitude:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_hospital_departments:_space_(_blt__space_hospital_id:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_department:_space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_)_alt__agt_;_space_hospital_medical_equipment:_space_(_blt__space_hospital_id:_space_string;_space_medical_equipment_id:_space_number;_space_medical_equipment_count:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_medical_equipment:_space__blt__space_medical_equipment_id:_space_number;_space_medical_equipment_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_)_alt__agt_;_space_hospital_servere_illness:_space_(_blt__space_hospital_id:_space_string;_space_servere_illness_id:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_servere_illness:_space__blt__space_servere_illness_id:_space_string;_space_servere_illness_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_)_alt__agt_;_space__bgt_": {
      hospital_id: string;
      hospital_name: string;
      hospital_address: string;
      hospital_type: components["schemas"]["er_MedicalFacilityType"];
      hospital_phone: string | null;
      hospital_city: string;
      hospital_district: string;
      latitude: number | null;
      longitude: number | null;
      /**
       * Format: date-time
       * @description
       * default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      hospital_departments: components["schemas"]["_blt__space_hospital_id:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_department:_space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_"][];
      hospital_medical_equipment: components["schemas"]["_blt__space_hospital_id:_space_string;_space_medical_equipment_id:_space_number;_space_medical_equipment_count:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_medical_equipment:_space__blt__space_medical_equipment_id:_space_number;_space_medical_equipment_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_"][];
      hospital_servere_illness: components["schemas"]["_blt__space_hospital_id:_space_string;_space_servere_illness_id:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_servere_illness:_space__blt__space_servere_illness_id:_space_string;_space_servere_illness_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_"][];
    };
    "_blt__space_hospital_id:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_department:_space__blt__space_department_id:_space_number;_space_department_name:_space_string;_space_parent_department_id:_space_number_space__or__space_null;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_": {
      hospital_id: string;
      department_id: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      department: components["schemas"]["__type.o10"];
    };
    "_blt__space_hospital_id:_space_string;_space_medical_equipment_id:_space_number;_space_medical_equipment_count:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_medical_equipment:_space__blt__space_medical_equipment_id:_space_number;_space_medical_equipment_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_": {
      hospital_id: string;
      medical_equipment_id: number;
      medical_equipment_count: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      medical_equipment: components["schemas"]["__type.o18"];
    };
    "__type.o18": {
      medical_equipment_id: number;
      medical_equipment_name: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "_blt__space_hospital_id:_space_string;_space_servere_illness_id:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_servere_illness:_space__blt__space_servere_illness_id:_space_string;_space_servere_illness_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_": {
      hospital_id: string;
      servere_illness_id: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      servere_illness: components["schemas"]["__type.o19"];
    };
    "__type.o19": {
      servere_illness_id: string;
      servere_illness_name: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "_blt__space_emergency_room_id:_space_string;_space_emergency_center_id:_space_string;_space_emergency_room_type:_space_er_EmergencyRoomType;_space_emergency_room_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_emergency_room_beds:_space__blt__space_emergency_room_id:_space_string;_space_emergency_room_bed_num:_space_number;_space_emergency_room_bed_status:_space_er_EmergencyRoomBedStatus;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__alt__agt_;_space__count:_space__blt__space_emergency_room_beds:_space_number;_space__bgt_;_space__bgt_": {
      emergency_room_id: string;
      emergency_center_id: string;
      emergency_room_type: components["schemas"]["er_EmergencyRoomType"];
      emergency_room_name: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      emergency_room_beds: components["schemas"]["__type.o20"][];
      _count: components["schemas"]["__type.o21"];
    };
    "__type.o20": {
      emergency_room_id: string;
      emergency_room_bed_num: number;
      emergency_room_bed_status: components["schemas"]["er_EmergencyRoomBedStatus"];
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "__type.o21": {
      emergency_room_beds: number;
    };
    "ErEmergencyCenterRequest.AssignPatientToBedDto": {
      /**
       * 환자의 고유 아이디
       * @description 병상에 배정할 환자의 고유 아이디
       */
      patient_id: string;
    };
    "ER_EMERGENCY_CENTER_ERROR.EMERGENCY_ROOM_BED_NOT_AVAILABLE": {
      /** @enum {string} */
      message: "Emergency room bed is not available";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ErEmergencyCenterRequest.ChangePatientToBedDto": {
      /**
       * 응급실 id
       * @description 이동할 응급실 id
       */
      target_emergency_room_id: string;
      /**
       * 병상 number
       * @description 이동할 병상 number
       */
      target_emergency_room_bed_num: number;
    };
    "ErEmployeeRequest.CreateManyDTO": {
      /**
       * CreateManyDTO
       * @description 직원들을 한번에 많이 생성할때 사용
       */
      employees: components["schemas"]["ErEmployeeRequest.CreateDTO"][];
    };
    "ErEmployeeRequest.CreateDTO": {
      /**
       * 지원 이름
       * @description 지원 이름
       */
      employee_name: string;
      /**
       * 직원 고유 아이디
       * @description 지원 고유 아이디, 각 병워별로 중복되지 않아야함
       */
      id_card: string;
      /** 비밀번호 */
      password: string;
      /**
       * 직원의 역할
       * @description 직원의 ROLE - ADMIN(관리자), SPECIALIST(전문의), RESIDENT(전공의), NURSE(간호사), EMT(응급구조사)
       * @enum {string}
       */
      role: "ADMIN" | "SPECIALIST" | "RESIDENT" | "NURSE" | "EMT" | "RECEPTIONIST";
      /**
       * 진료과 id
       * @description 진료과 id
       * null 일 경우, 직원의 진료과를 지정하지 않는다.
       */
      department_id?: number;
      /**
       * 의사의 전문분야 id list - 의사일경우에만 사용
       * @description 의사의 전문분야 id list
       * null 일 경우, 직원의 전문분야를 지정하지 않는다.
       */
      employee_doctor_specialization_list?: string[];
      /**
       * 간호사의 전문분야 id list - 간호사일경우에만 사용
       * @description 간호사의 전문분야 id list
       * null 일 경우, 직원의 전문분야를 지정하지 않는다.
       */
      employee_nurse_specialization_list?: string[];
      employee_id?: string;
      hospital_id?: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      /** @enum {string} */
      status?: "ACTIVE" | "INACTIVE" | "DELETED";
    };
    "ER_EMPLOYEE_ERROR.EMPLOYEE_MULTIPLE_ALREADY_EXIST": {
      /** @enum {string} */
      message: "EMPLOYEE_MULTIPLE_ALREADY_EXIST";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "Try_lt_Prisma.BatchPayload_gt_": {
      result: components["schemas"]["Prisma.BatchPayload"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "Prisma.BatchPayload": {
      count: number;
    };
    "ErEmployeeRequest.CheckManyExistDTO": {
      /**
       * 직원의 고유 아이디 리스트
       * @description 중복체크할 직원의 고유 아이디 리스트
       */
      id_cards: string[];
    };
    "Try_lt_ErEmployeeResponse.CheckManyEmployeeExist_gt_": {
      result: components["schemas"]["ErEmployeeResponse.CheckManyEmployeeExist"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEmployeeResponse.CheckManyEmployeeExist": {
      exists: components["schemas"]["Pick_lt___type_comma__space__doublequote_id_card_doublequote__gt_.o1"][];
    };
    "Pick_lt___type_comma__space__doublequote_id_card_doublequote__gt_.o1": {
      id_card: string;
    };
    "ErEmployeeRequest.UpdatePasswordDTO": {
      /**
       * 변경할 직원 비밀번호
       * @description 변경할 직원 비밀번호
       */
      password: string;
      /**
       * 현재 직원 비밀번호
       * @description 현재 직원의 비밀번호 - 비밀번호가 틀릴경우 에러
       */
      now_password: string;
    };
    "ER_EMPLOYEE_ERROR.EMPLOYEE_NOT_FOUND": {
      /** @enum {string} */
      message: "Employee doesn't exist";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_ErEmployeeResponse.UpdatePassword_gt_": {
      result: components["schemas"]["ErEmployeeResponse.UpdatePassword"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEmployeeResponse.UpdatePassword": {
      update_success: boolean;
    };
    "ErEmployeeRequest.GetEmployeeListQuery": {
      /** @default 1 */
      page?: number;
      /** @default 10 */
      limit?: number;
      /** @default '' */
      search?: string;
      /** @enum {string} */
      role?: "ADMIN" | "SPECIALIST" | "RESIDENT" | "NURSE" | "EMT" | "RECEPTIONIST";
      /** @enum {string} */
      search_type?: "employee_name" | "id_card";
    };
    "Try_lt_ErEmployeeResponse.GetEmployeeList_gt_": {
      result: components["schemas"]["ErEmployeeResponse.GetEmployeeList"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEmployeeResponse.GetEmployeeList": {
      count: number;
      employee_list: components["schemas"]["ErEmployee.GetEmpoyeeWithoutPassword"][];
    };
    "ErEmployee.GetEmpoyeeWithoutPassword": {
      department_id: number | null;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      employee_id: string;
      employee_name: string;
      id_card: string;
      role: components["schemas"]["er_EmployeeRole"];
      hospital_id: string;
      employee_doctor_specializations?: components["schemas"]["_blt__space_employee_id:_space_string;_space_doctor_specialization_id:_space_string;_space_created_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_doctor_specialization:_space__blt__space_doctor_specialization_id:_space_string;_space_doctor_specialization_name:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_"][];
      employee_nurse_specializations?: components["schemas"]["_blt__space_employee_id:_space_string;_space_nurse_specialization_id:_space_string;_space_created_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_nurse_specialization:_space__blt__space_nurse_specialization_id:_space_string;_space_nurse_specialization_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_"][];
      department?: components["schemas"]["__type.o10.Nullable"];
    };
    /** @enum {string} */
    er_EmployeeRole: "ADMIN" | "SPECIALIST" | "RESIDENT" | "NURSE" | "EMT" | "RECEPTIONIST";
    "_blt__space_employee_id:_space_string;_space_doctor_specialization_id:_space_string;_space_created_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_doctor_specialization:_space__blt__space_doctor_specialization_id:_space_string;_space_doctor_specialization_name:_space_string;_space_department_id:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_": {
      employee_id: string;
      doctor_specialization_id: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      status: components["schemas"]["Status"];
      doctor_specialization: components["schemas"]["__type.o9"];
    };
    "_blt__space_employee_id:_space_string;_space_nurse_specialization_id:_space_string;_space_created_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_nurse_specialization:_space__blt__space_nurse_specialization_id:_space_string;_space_nurse_specialization_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_": {
      employee_id: string;
      nurse_specialization_id: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      status: components["schemas"]["Status"];
      nurse_specialization: components["schemas"]["__type.o22"];
    };
    "__type.o22": {
      nurse_specialization_id: string;
      nurse_specialization_name: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "Try_lt_ErEmployeeResponse.GetNurseSpecilizationList_gt_": {
      result: components["schemas"]["ErEmployeeResponse.GetNurseSpecilizationList"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEmployeeResponse.GetNurseSpecilizationList": components["schemas"]["__type.o22"][];
    "Try_lt_ErEquipment.GetEquipmentStatusByIdReturn_gt_": {
      result: components["schemas"]["ErEquipment.GetEquipmentStatusByIdReturn"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErEquipment.GetEquipmentStatusByIdReturn": components["schemas"]["__type.o23"][] | components["schemas"]["ER_EQUIPMENT_ERROR.HOSPITAL_INVALID"];
    "__type.o23": {
      equipment_id: number;
      equipment_name: string;
      equipment_count: number;
    };
    "ER_EQUIPMENT_ERROR.HOSPITAL_INVALID": {
      /** @enum {string} */
      message: "Hospital is invalid";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    Try_lt_Array_lt___type_gt__gt_: {
      result: components["schemas"]["__type.o23"][];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "__type.o24": {
      equipment_id: number;
      equipment_count: number;
    };
    "ER_EQUIPMENT_ERROR.EQUIPMENT_NOT_EXIST": {
      /** @enum {string} */
      message: "Equipment not exist: ";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "Try_lt_ErIllness.GetIllnessesReturn_gt_": {
      result: components["schemas"]["ErIllness.GetIllnessesReturn"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErIllness.GetIllnessesReturn": components["schemas"]["__type.o25"][];
    "__type.o25": {
      illness_id: string;
      illness_name: string;
    };
    "ErIllnessRequest.GetCurrentServableIllnessesStatusQuery": {
      /** @enum {string} */
      status?: "ACTIVE" | "INACTIVE" | "DELETED";
    };
    "Try_lt_ErIllness.GetServableIllnessesStatusReturn_gt_": {
      result: components["schemas"]["ErIllness.GetServableIllnessesStatusReturn"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErIllness.GetServableIllnessesStatusReturn": components["schemas"]["__type.o26"][] | components["schemas"]["ER_ILLNESS_ERROR.HOSPITAL_INVALID"];
    "__type.o26": {
      servable_illness_id: string;
      servable_illness_name: string;
      status: components["schemas"]["Status"];
    };
    "ER_ILLNESS_ERROR.HOSPITAL_INVALID": {
      /** @enum {string} */
      message: "Hospital is invalid";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "Try_lt_Array_lt___type_gt__gt_.o1": {
      result: components["schemas"]["__type.o26"][];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "__type.o27": {
      illness_id: string;
      /** @enum {string} */
      illness_status: "ACTIVE" | "INACTIVE" | "DELETED";
    };
    "Try_lt_ErIllness.UpdateServableIllnessesStatusReturn_gt_": {
      result: components["schemas"]["ErIllness.UpdateServableIllnessesStatusReturn"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErIllness.UpdateServableIllnessesStatusReturn": components["schemas"]["__type.o26"][] | components["schemas"]["ER_ILLNESS_ERROR.HOSPITAL_INVALID"] | components["schemas"]["ER_ILLNESS_ERROR.ILLNESS_NOT_EXIST"];
    "ER_ILLNESS_ERROR.ILLNESS_NOT_EXIST": {
      /** @enum {string} */
      message: "Illness not exist: ";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ErPatientRequest.CreatePatientDto": {
      /**
       * 환자의 이름
       * @description 환자의 이름
       */
      patient_name: string;
      /**
       * 환자의 성별
       * @description 환자의 성별
       * @enum {string}
       */
      patient_gender: "FEMALE" | "MALE";
      /**
       * 환자의 생년월일
       * @description 환자의 생년월일
       */
      patient_birth: string;
      /**
       * 환자의 주민등록번호 뒷자리
       * @description 환자의 주민등록번호 뒷자리
       */
      patient_identity_number: string;
      /**
       * 환자의 전화번호
       * @description 환자의 전화번호
       */
      patient_phone: string;
      /**
       * 환자의 주소
       * @description 환자의 주소
       */
      patient_address: string;
      guardian?: components["schemas"]["__type.o28"];
      /**
       * 환자의 담당 의사 고유 아이디
       * @description 환자의 담당 의사 고유 아이디
       */
      doctor_id: string;
      /**
       * 환자의 담당 간호사 고유 아이디
       * @description 환자의 담당 간호사 고유 아이디
       */
      nurse_id: string;
    };
    "__type.o28": {
      /**
       * 보호자의 이름
       * @description 보호자의 이름
       */
      guardian_name: string;
      /**
       * 보호자의 전화번호
       * @description 보호자의 전화번호
       */
      guardian_phone: string;
      /**
       * 보호자의 주소
       * @description 보호자의 주소
       */
      guardian_address: string;
      /**
       * 보호자의 관계
       * @description 보호자의 관계
       * @enum {string}
       */
      guardian_relation: "OTHER" | "PARENT" | "SPOUSE" | "CHILD" | "SIBLING" | "FRIEND";
    };
    "ER_PATIENT_ERROR.DOCTOR_NOT_EXIST": {
      /** @enum {string} */
      message: "Doctor not exist: ";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_ErPatient.CreatePatientReturn_gt_": {
      result: components["schemas"]["ErPatient.CreatePatientReturn"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErPatient.CreatePatientReturn": {
      patient_id: string;
      patient_name: string;
      patient_birth: string;
      patient_identity_number: string;
      patient_gender: components["schemas"]["Gender"];
      patient_phone: string;
      patient_address: string;
      guardian_id: string | null;
      doctor_id: string;
      nurse_id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      guardian: components["schemas"]["__type.o29.Nullable"];
    };
    "__type.o29.Nullable": {
      guardian_id: string;
      guardian_name: string;
      guardian_phone: string;
      guardian_address: string;
      guardian_relation: components["schemas"]["ems_GuardianRelation"];
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    } | null;
    "ErPatientRequest.RecordPatientLogDto": {
      /**
       * 진단 타입
       * @description 진단 타입
       * @enum {string}
       */
      log_type: "DIAGNOSIS" | "TREATMENT" | "MEDICATION" | "TRANSFER" | "DISCHARGE" | "DEATH" | "CONSULTATION";
      /**
       * 진단 내용
       * @description 진단 내용
       */
      log_desc: string;
    };
    "ER_PATIENT_ERROR.PATIENT_NOT_EXIST": {
      /** @enum {string} */
      message: "Patient not exist: ";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "REQ_EMS_TO_ER_ERROR.PENDING_PATIENT_NOT_FOUND": {
      /** @enum {string} */
      message: "PATIENT_NOT_FOUND";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "REQ_EMS_TO_ER_ERROR.REQUEST_ALREADY_PROCESSED": {
      /** @enum {string} */
      message: "REQUEST_ALREADY_PROCESSED";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_ReqEmsToErResponse.createEmsToErRequest_gt_": {
      result: components["schemas"]["ReqEmsToErResponse.createEmsToErRequest"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ReqEmsToErResponse.createEmsToErRequest": {
      target_emergency_center_list: components["schemas"]["__type.o30"][];
      patient: components["schemas"]["__type.o31"];
    };
    "__type.o30": {
      patient_id: string;
      emergency_center_id: string;
      request_status: components["schemas"]["RequestStatus"];
      /** Format: date-time */
      request_date: string;
      reject_reason: string | null;
      /** Format: date-time */
      response_date: string;
      emergency_center_name: string;
      emergency_center_latitude: number;
      emergency_center_longitude: number;
      /** @description 응급차와 응급실 사이의 거리 */
      distance: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    /** @enum {string} */
    RequestStatus: "REQUESTED" | "ACCEPTED" | "CANCELED" | "COMPLETED" | "VIEWED" | "REJECTED";
    "__type.o31": {
      patient_id: string;
      /** @description 익명으로 기본값 */
      patient_name: string;
      /** @description 생년월일 0000-00-00 형식 0000-00-00은 미상 */
      patient_birth: string;
      patient_gender: components["schemas"]["Gender"];
      patient_severity: components["schemas"]["ems_Severity"];
      patient_symptom_summary: string;
      /** @description 위도 - 사고지점 */
      patient_latitude: number;
      /** @description 경도 - 사고지점 */
      patient_longitude: number;
      /** @description 요청한 곳 */
      ambulance_company_id: string;
      ambulance_company_name: string;
      ems_employee_id: string;
      ems_employee_name: string;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
    };
    "ReqEmsToErRequest.GetEmsToErRequestListQuery": {
      page?: number;
      limit?: number;
      search?: string;
      /** @enum {string} */
      search_type?: "patient_name" | "ambulance_company_name" | "patient_symptom_summary";
      request_status?: ("REQUESTED" | "ACCEPTED" | "CANCELED" | "COMPLETED" | "VIEWED" | "REJECTED")[];
      patient_gender?: ("FEMALE" | "MALE")[];
      patient_severity?: ("UNKNOWN" | "SEVERE" | "MILD" | "NONE")[];
      /** Format: date-time */
      request_start_date?: string;
    };
    "Try_lt_ReqEmsToErResponse.getEmsToErRequestList_gt_": {
      result: components["schemas"]["ReqEmsToErResponse.getEmsToErRequestList"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ReqEmsToErResponse.getEmsToErRequestList": {
      request_list: components["schemas"]["_blt__space_patient_id:_space_string;_space_emergency_center_id:_space_string;_space_request_status:_space_RequestStatus;_space_request_date:_space_Date;_space_reject_reason:_space_string_space__or__space_null;_space_response_date:_space_Date;_space_emergency_center_name:_space_string;_space_emergency_center_latitude:_space_number;_space_emergency_center_longitude:_space_number;_space_distance:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_patient:_space__blt__space_patient_id:_space_string;_space_patient_name:_space_string;_space_patient_birth:_space_string;_space_patient_gender:_space_Gender;_space_patient_severity:_space_ems_Severity;_space_patient_symptom_summary:_space_string;_space_patient_latitude:_space_number;_space_patient_longitude:_space_number;_space_ambulance_company_id:_space_string;_space_ambulance_company_name:_space_string;_space_ems_employee_id:_space_string;_space_ems_employee_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_"][];
      count: number;
    };
    "_blt__space_patient_id:_space_string;_space_emergency_center_id:_space_string;_space_request_status:_space_RequestStatus;_space_request_date:_space_Date;_space_reject_reason:_space_string_space__or__space_null;_space_response_date:_space_Date;_space_emergency_center_name:_space_string;_space_emergency_center_latitude:_space_number;_space_emergency_center_longitude:_space_number;_space_distance:_space_number;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt__space__and__space__blt__space_patient:_space__blt__space_patient_id:_space_string;_space_patient_name:_space_string;_space_patient_birth:_space_string;_space_patient_gender:_space_Gender;_space_patient_severity:_space_ems_Severity;_space_patient_symptom_summary:_space_string;_space_patient_latitude:_space_number;_space_patient_longitude:_space_number;_space_ambulance_company_id:_space_string;_space_ambulance_company_name:_space_string;_space_ems_employee_id:_space_string;_space_ems_employee_name:_space_string;_space_created_at:_space_Date;_space_updated_at:_space_Date;_space_status:_space_Status;_space__bgt_;_space__bgt_": {
      patient_id: string;
      emergency_center_id: string;
      request_status: components["schemas"]["RequestStatus"];
      /** Format: date-time */
      request_date: string;
      reject_reason: string | null;
      /** Format: date-time */
      response_date: string;
      emergency_center_name: string;
      emergency_center_latitude: number;
      emergency_center_longitude: number;
      /** @description 응급차와 응급실 사이의 거리 */
      distance: number;
      /**
       * Format: date-time
       * @description default
       */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      status: components["schemas"]["Status"];
      patient: components["schemas"]["__type.o31"];
    };
    "ReqEmsToErRequest.RespondEmsToErRequestDto": {
      /** @enum {string} */
      response: "ACCEPTED" | "REJECTED";
      reject_reason?: string;
    };
    "REQ_EMS_TO_ER_ERROR.REQUEST_NOT_FOUND": {
      /** @enum {string} */
      message: "REQUEST_NOT_FOUND";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 404;
    };
    "Try_lt_EmsAuthResponse.CheckAuthStatus_gt_": {
      result: components["schemas"]["EmsAuthResponse.CheckAuthStatus"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsAuthResponse.CheckAuthStatus": {
      is_login: boolean;
      employee: components["schemas"]["EmsAuth.AccessTokenSignPayload.Nullable"];
    };
    "EmsAuth.AccessTokenSignPayload.Nullable": {
      ambulance_company_id: string;
      employee_name: string;
      employee_id: string;
      id_card: string;
      role: components["schemas"]["ems_EmployeeRole"];
    } | null;
    "EmsAuthRequest.LoginDTO": {
      /**
       * 구급업체 이름
       * @description 구급업체 이름 - 추후 변경 가능성 있음
       */
      ambulance_company_name: string;
      /**
       * 구급업체 직원 고유 아이디
       * @description 구급업체 직원 고유 아이디
       */
      id_card: string;
      /** 비밀번호 */
      password: string;
    };
    "AUTH_ERROR.EMPLOYEE_NOT_FOUND": {
      /** @enum {string} */
      message: "Employee doesn't exist";
      /** @enum {boolean} */
      is_success: false;
      /** @enum {number} */
      http_status_code: 400;
    };
    "ResponseDTO_lt_EmsAuthResponse.Login_gt_": {
      result: components["schemas"]["EmsAuthResponse.Login"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsAuthResponse.Login": {
      /**
       * 로그인 성공 여부
       * @description 로그인 성공 여부
       */
      is_login: boolean;
      employee: components["schemas"]["EmsAuth.AccessTokenSignPayload"];
    };
    "EmsAuth.AccessTokenSignPayload": {
      ambulance_company_id: string;
      employee_name: string;
      employee_id: string;
      id_card: string;
      role: components["schemas"]["ems_EmployeeRole"];
    };
    "Try_lt_EmsAuthResponse.Logout_gt_": {
      result: components["schemas"]["EmsAuthResponse.Logout"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "EmsAuthResponse.Logout": {
      /** @enum {boolean} */
      is_login: false;
    };
    "Try_lt_ErAuthResponse.CheckAuthStatus_gt_": {
      result: components["schemas"]["ErAuthResponse.CheckAuthStatus"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErAuthResponse.CheckAuthStatus": {
      is_login: boolean;
      employee: components["schemas"]["ErAuth.AccessTokenSignPayload.Nullable"];
    };
    "ErAuth.AccessTokenSignPayload.Nullable": {
      hospital_id: string;
      emergency_center_id: string;
      employee_name: string;
      employee_id: string;
      id_card: string;
      role: components["schemas"]["er_EmployeeRole"];
    } | null;
    "ErAuthRequest.LoginDTO": {
      /**
       * 응급센터 id
       * @description 응급센터 id - 주의 : 병원 아이디가 아닌 응급센터 고유 아이디
       */
      emergency_center_id: string;
      /**
       * 직원 고유 아이디
       * @description 직원 고유 아이디
       */
      id_card: string;
      /** 비밀번호 */
      password: string;
    };
    "ResponseDTO_lt_ErAuthResponse.Login_gt_": {
      result: components["schemas"]["ErAuthResponse.Login"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErAuthResponse.Login": {
      is_login: boolean;
      employee: components["schemas"]["ErAuth.AccessTokenSignPayload"];
    };
    "ErAuth.AccessTokenSignPayload": {
      hospital_id: string;
      emergency_center_id: string;
      employee_name: string;
      employee_id: string;
      id_card: string;
      role: components["schemas"]["er_EmployeeRole"];
    };
    "Try_lt_ErAuthResponse.Logout_gt_": {
      result: components["schemas"]["ErAuthResponse.Logout"];
      /** @enum {boolean} */
      is_success: true;
      request_to_response?: number;
      message: string;
    };
    "ErAuthResponse.Logout": {
      /** @enum {boolean} */
      is_login: false;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
